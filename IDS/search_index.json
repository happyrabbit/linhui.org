[
["index.html", "Introduction to Data Science Copyright Statement", " Introduction to Data Science Hui Lin and Ming Li 2017-11-26 Copyright Statement This work by Hui Lin and Ming Li is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 United States License. Please note that this work is being written under a Contributor Code of Conduct and released under a CC-BY-NC-SA license. By participating in this project (for example, by submitting a pull request with suggestions or edits) you agree to abide by its terms. "],
["about-the-authors.html", "About the Authors", " About the Authors Hui Lin is currently Data Scientist at DuPont Pioneer. She is a leader within DuPont at applying advanced data science to enhance Marketing and Sales effectiveness. She has been providing statistical leadership for a broad range of predictive analytics and market research analysis since 2013. She is the co-founder of Central Iowa R User Group, blogger of scientistcafe.com and program Chair of Statistics in Marketing Section of ASA for 2018. She enjoys making analytics accessible to a broad audience and teaches tutorials and workshops for practitioners on data science. She holds MS and Ph.D. in statistics from Iowa State University, BS in mathematical statistics from Beijing Normal University. Ming Li is currently a Sr. Data Scientist at Amazon. He was Data Scientist at Wal-Mart and an Adjunct Faculty of Department and Marketing and Business Analytics in TAMU – Commerce. He is also the Chair of Quality &amp; Productivity Section of ASA for 2016. He was a Statistical Leader at General Electric Global Research Center and Research Statistician at SAS Institute. He obtained his Ph.D. in Statistics from Iowa State University at 2010. With deep statistics background and a few years’ experience in data science, he has trained and mentored numerous junior data scientist with different backgrounds such as statistics, computer science, and business analytics. "],
["acknowledgements.html", "Acknowledgements", " Acknowledgements We want to give special thanks to Alex Shum and David Body for their editing and comments on the sections of this book. "],
["the-art-of-data-science.html", "Chapter 1 The art of data science", " Chapter 1 The art of data science Data science and data scientist have become buzz words. Allow me to reiterate what you may have already heard a million times in the media: data scientists are in demand and demand continues to grow. A study by the McKinsey Global Institute concludes, “a shortage of the analytical and managerial talent necessary to make the most of Big Data is a significant and pressing challenge (for the U.S.).” You may expect that statisticians and graduate students from traditional statistics departments are great data scientist candidates. But the situation is that the majority of current data scientists do not have a statistical background. As David Donoho pointed out: “statistics is being marginalized here; the implicit message is that statistics is a part of what goes on in data science but not a very big part.” ( from “50 years of Data Science”). What is wrong? The activities that preoccupied statistics over centuries are now in the limelight, but those activities are claimed to belong to a new discipline and are practiced by professionals from various backgrounds. Various professional statistics organizations are reacting to this confusing situation. (Page 5-7, “50 Years of Data Science”) From those discussions, Donoho summarizes the main recurring “Memes” about data sciences: The ‘Big Data’ Meme The ‘Skills’ Meme The ‘Jobs’ Meme The first two are linked together which leads to statisticians’ current position on data science. We assume everyone has heard the 3V (volume, variety and velocity) definition of big data. The media hasn’t taken a minute break from touting “big” data. Data science trainees now need the skills to cope with such big data sets. What are those skills? You may hear about: Hadoop, system using Map/Reduce to process large data sets distributed across a cluster of computers. The new skills are for dealing with organizational artifacts of large-scale cluster computing but not for better solving the real problem. A lot of data on its own is worthless. It isn’t the size of the data that’s important. It’s what you do with it. The big data skills that so many are touting today are not skills for better solving the real problem of inference from data. Some media think they sense the trends in hiring and government funding. We are transiting to universal connectivity with a deluge of data filling telecom servers. But these facts don’t immediately create a science. The statisticians have been laying the groundwork of data science for at least 50 years. Today’s data science is an enlargement of traditional academic statistics rather than a brand new discipline. "],
["what-is-data-science.html", "1.1 What is data science?", " 1.1 What is data science? This question is not new. When you tell people “I am a data scientist”. “Ah, data scientist!” Yes, who doesn’t know that data scientist is the sexist job in 21th century? If they ask further what is data science and what exactly do data scientists do, it may effectively kill the conversation. Data Science doesn’t come out of the blue. Its predecessor is data analysis. Back in 1962, John Tukey wrote in “The Future of Data Analysis”: For a long time I have thought I was a statistician, interested in inferences from the particular to the general. But as I have watched mathematical statistics evolve, I have had cause to wonder and to doubt. … All in all, I have come to feel that my central interest is in data analysis, which I take to include, among other things: procedures for analyzing data, techniques for interpreting the results of such procedures, ways of planning the gathering of data to make its analysis easier, more precise or more accurate, and all the machinery and results of (mathematical) statistics which apply to analyzing data. It deeply shocked his academic readers. Aren’t you supposed to present something mathematically precise, such as definitions, theorems and proofs? If we use one sentence to summarize what John said, it is: data analysis is more than mathematics. In September 2015, the University of Michigan make plans to invest $100 million over the next five years in a new Data Science Initiative that will enhance opportunities for student and faculty researchers across the university to tap into the enormous potential of big data. UM Provost Martha Pollack said: “Data science has become a fourth approach to scientific discovery, in addition to experimentation, modeling and computation,…” How does the Data Science Initiative define Data science? Their website gives us an idea: “This coupling of scientific discovery and practice involves the collection, management, processing, analysis, visualization, and interpretation of vast amounts of heterogeneous data associated with a diverse array of scientific, translational, and interdisciplinary applications.” With the data science hype picking up stream, many professionals changed their titles to Data Scientist without any of the necessary qualifications. But at that time, the data scientist title was not well defined which lead to confusion in the market, obfuscation in resumes, and exaggeration of skills. Here is a list of somewhat whimsical definitions for a “data scientist”: “A data scientist is a data analyst who lives in California” “A data scientist is someone who is better at statistics than any software engineer and better at software engineering than any statistician.” “A data scientist is a statistician who lives in San Francisco.” “Data Science is statistics on a Mac.” There is lots of confusion between Data Scientist, Statistician, Business/Financial/Risk(etc) Analyst and BI professional due to the obvious intersections among skillsets. We see data science as a discipline to make sense of data. In order to make sense of data, statistics is indispensable. But a data scientist also needs many other skills. In the obscenity case of Jacobellis v. Ohio (1964), Potter Stewart wrote in his short concurrence that “hard-core pornography” was hard to define, but that “I know it when I see it.” This applies to many things including data science. It is hard to define but you know it when you see it. So instead of scratching my head to figure out a one sentence definition, We are going to sketch the history of data science, what kind of questions data science can answer, and describe the skills required for being a data scientist. We hope this can give you a better depiction of data science. In the early 19th century when Legendre and Gauss came up the least squares method for linear regression, only physicists would use it to fit linear regression. Now, even non-technical people can fit linear regressions using excel. In 1936 Fisher came up with linear discriminant analysis. In the 1940s, we had another widely used model – logistic regression. In the 1970s, Nelder and Wedderburn formulated “generalized linear model (GLM)” which: “generalized linear regression by allowing the linear model to be related to the response variable via a link function and by allowing the magnitude of the variance of each measurement to be a function of its predicted value.” [from Wikipedia] By the end of the 1970s, there was a range of analytical models and most of them were linear because computers were not powerful enough to fit non-linear model until the 1980s. In 1984 Breiman et al. introduced classification and regression tree (CART) which is one of the oldest and most utilized classification and regression techniques. After that Ross Quinlan came up with more tree algorithms such as ID3, C4.5 and C5.0. In the 1990s, ensemble techniques (methods that combine many models’ predictions) began to appear. Bagging is a general approach that uses bootstrapping in conjunction with any regression or classification model to construct an ensemble. Based on the ensemble idea, Breiman came up with random forest in 2001. Later, Yoav Freund and Robert Schapire came up with the AdaBoost.M1 algorithm. Benefiting from the increasing availability of digitized information, and the possibility to distribute that via the internet, the tool box has been expanding fast. The applications include business, health, biology, social science, politics etc. John Tukey identified 4 forces driving data analysis (there was no “data science” then): The formal theories of math and statistics Acceleration of developments in computers and display devices The challenge, in many fields, of more and ever larger bodies of data The emphasis on quantification in an ever wider variety of disciplines Tukey’s 1962 list is surprisingly modern. Let’s inspect those points in today’s context. There is always a time gap between a theory and its application. We had the theories much earlier than application. Fortunately, for the past 50 years statisticians have been laying the theoretical groundwork for constructing “data science” today. The development of computers enables us to calculate much faster and deliver results in a friendly and intuitive way. The striking transition to the internet of things generates vast amounts of commercial data. Industries have also sensed the value of exploiting that data. Data science seems certain to be a major preoccupation of commercial life in coming decades. All the four forces John identified exist today and have been driving data science. "],
["is-it-science-totally.html", "1.2 Is it science? Totally?", " 1.2 Is it science? Totally? Let’s take one step back. What is science? Here is what John Tukey said: There are diverse views as to what makes a science, but three constituents will be judged essential by most, viz: (a1) intellectual content, (a2) organization in an understandable form, (a3) reliance upon the test of experience as the ultimate standard of validity The first one (a1) doesn’t provide useful information. And (a2) can’t distinguish science from art very well. The last one is a key character of science. The influential philosopher of science Karl Popper argued that science advances by falsifying hypotheses. If science needs to be falsifiable, then data science is not 100% science. It is true that there are some analytical results that can be validated (falsified) through cross validation or comparing prediction with future outcomes. But certainly not all of them. Even in the problem of prediction, we can’t validate predictions in the 2nd order chaotic systems. We can’t scientifically validate many unsupervised learning or descriptive analysis, especially in the context of marketing. In that sense, data science is a combination of science and art. There is another definition of science from the famous computer scientist Donald Knuth. He said in his legendary 1974 essay Computer Programming as an Art: “Science is knowledge which we understand so well that we can teach it to a computer.” Computers are indispensable for data science. But can we teach computers to do all the work data scientists do today? No. So it is not totally science. Computers can’t communicate with stakeholders to transform a real life problem to be data problem. Computers don’t know which questions can be answered through analytics. Computers don’t know how to explain the results to different audiences using different ways according to their backgrounds. Computers are powerful in many ways but certainly not all. Would a computer enter a ‘runaway reaction’ of self-improvement cycles so that it could surpass human in every way in the future? Well, that is not a question we are trying to answer here. If you are interested in the future of technology, there are some books you can refer to. Ray Kurzweil (The Singularity Is Near), Yuval Noah Harari (Homo Deus: A Brief History of Tomorrow) and Kevin Kelly (The Inevitable). At the risk of being short-sighted, we will assume it won’t happen in foreseeable future. To be simple I will still use data science in the rest of the book. But it is important to realize that data science includes art. "],
["what-kind-of-questions-can-data-science-solve.html", "1.3 What kind of questions can data science solve?", " 1.3 What kind of questions can data science solve? 1.3.1 Prerequisites Data science is not a panacea, and data scientists are not magicians. There are problems data science can’t help. It is best to make a judgment as early in the analytical cycle as possible. Tell your clients honestly and clearly when you figure data analytics can’t give the answer they want. What kind of questions can data science solve? What are the requirements for our question? Your question needs to be specific enough Look at two examples: Question 1: How can I increase product sales? Question 2: Is the new promotional tool introduced at the beginning of this year boosting the annual sales of P1197 in Iowa and Wisconsin? (P1197 is an impressive corn seed product from DuPont Pioneer) It is easy to see the difference between the two questions. Question 1 is a grammatically correct question, but it is proper for data analysis to answer. Why? It is too general. What is the response variable here? Product sales? Which product? Is it annual sales or monthly sales? What are the candidate predictors? You nearly can’t get any useful information from the questions. In contrast, question 2 is much more specific. From the analysis point of view, the response variable is clearly “annual sales of P1197 in Iowa and Wisconsin”. Even we don’t know all the predictors, but the variable of interest is “the new promotional tool introduced early this year.” We want to study the impact of the promotion on the sales. You can start from there and move on to figure out other variables need to include in the model by further communication. As a data scientist, you may start with something general and unspecific like question 1 and eventually get to question 2. Effective communication and in-depth domain knowledge about the business problem are essential to convert a general business question into a solvable analytical problem. Domain knowledge helps data scientist communicate with the language the other people can understand and obtain the required information. However, defining the question and variables involved don’t guarantee that you can answer it. I have encountered a well-defined supply chain problem. My client asked about the stock needed for a product in a particular area. Why can not this question be answered? I did fit a Multivariate Adaptive Regression Spline (MARS) model and thought I found a reasonable solution. But it turned out later that the data they gave me was inaccurate. In some areas, only estimates of past supply figures were available. The lesson lends itself to the next point. You need to have sound and relevant data One cannot make a silk purse out of a sow’s ear. Data scientists need data, sound and relevant data. The supply problem is a case in point. There was relevant data, but not sound. All the later analytics based on that data was a building on sand. Of course, data nearly almost have noise, but it has to be in a certain range. Generally speaking, the accuracy requirement for the independent variables of interest and response variable is higher than others. In question 2, it is data related to the “new promotion” and “sales of P1197”. The data has to be helpful for the question. If you want to predict which product consumers are most likely to buy in the next three months, you need to have historical purchasing data: the last buying time, the amount of invoice, coupons and so on. Information about customers’ credit card number, ID number, the email address is not going to help. Often the quality of the data is more important than the quantity, but the quantity can not be overlooked. In the premise of guaranteeing quality, usually the more data, the better. If you have a specific and reasonable question, also sound and relevant data, then congratulations, you can start playing data science! 1.3.2 Problem type Many of the data science books classify the various models from a technical point of view. Such as supervised vs. unsupervised models, linear vs. nonlinear models, parametric models vs. non-parametric models, and so on. Here we will continue on “problem-oriented” track. We first introduce different groups of real problems and then present which models can be used to answer the corresponding category of questions. Comparison The first common problem is to compare different groups. Such as: Is A better in some way than B? Or more comparisons: Is there any difference among A, B, C in a certain aspect? Here are some examples: Are the purchasing amounts different between consumers receiving coupons and those without coupons? Are males more inclined to buy our products than females? Are there any differences in customer satisfaction in different business districts? Do the mice receiving a drug have a faster weight gain than the control group? Do soybeans carrying a particular gene contain more oil than the control group? For those problems, it is usually to start exploring from the summary statistics and visualization by groups. After a preliminary visualization, you can test the differences between treatment and control group statistically. The commonly used statistical tests are chi-square test, t-test, and ANOVA. There are also methods using Bayesian methods. In biology industry, such as new drug development, crop breeding, mixed effect models are the dominant technique. Description In the problem such as customer segmentation, after you cluster the sample, the next step is to figure out the profile of each class by comparing the descriptive statistics of the various variables. Questions of this kind are: Is the income of the family’s annual observations unbiased? What is the mean/variance of the monthly sales volume of a product in different regions? What is the difference in the magnitude of the variable? (Decide whether the data needs to be standardized) What is the prediction variable in the model? What is the age distribution of the respondents? Data description is often used to check data, find the appropriate data preprocessing method, and demonstrate the model results. Clustering Clustering is a widespread problem, which is usually related to classification. Clustering answers questions like: Which consumers have similar product preferences? (Marketing) Which printer performs similar pattern to the broken ones? (Quality Control) How many different kinds of employees are there in the company? (Human Resources) How many different themes are there in the corpus? (Natural Language Processing) Note that clustering is unsupervised learning. The most common clustering algorithms include K-Means and Hierachical Clustering. Classification Usually, a labeled sample set is used as a training set to train the classifier. Then the classifier is used to predict the category of a future sample. Here are some example questions: Is this customer going to buy our product? (yes/no) Is there a risk that a lender does not repay? Who is the author of this book? Is this spam email? There are hundreds of classifiers. In practice, we do not have to try all the models as long as we fit in several of the best models in most cases. Regression In general, regression deals with the problem of “how much is it?” and return a numerical answer. In some cases, it is necessary to coerce the model results to be 0, or round the result to the nearest integer. It is the most common problem. What will be the temperature tomorrow? What will be the company’s sales in the fourth quarter of this year? How long will the engine work? How much beer should we prepare for this event? "],
["what-are-the-required-skills-for-data-scientist.html", "1.4 What are the required skills for data scientist?", " 1.4 What are the required skills for data scientist? We talked about the bewildering definitions of data scientist. With the data science hype picking up, some professionals have begun changing their titles to Data Scientist without any of the necessary qualifications (see “Data Scientists…or Data Wannabes”). What are the required skills for data scientist? Educational Background Most of the data scientists today have undergraduate or higher degree from one of the following areas: computer science, electronic engineering, mathematics or statistics. According to a 2017 survey, 25% of US data scientists have a PhD degree, 64% have a Master’s degree, and 11% are Bachelors. Database Skills Data scientists in the industry need to use SQL to pull data from the database. So it is necessary to be familiar with how data is structured and how to do basic data manipulation using SQL. Many statistics/mathematics students do not have experience with SQL in school. Don’t worry. If you are proficient in one programming language, it is easy to pick up SQL. The main purpose of graduate school should be to develop the ability to learn and analytical thinking rather than the technical skills. Even the technical skills are necessary to enter the professional area. Most of the skills needed at work are not taught in school. Programming Skills Programming skills are critical for data scientists. According to a 2017 survey from Burtch Works, 97% of the data scientists today using R or Python. We will focus on R in this book, but both are great tools for data science. There is not one “have-to-use” tool. The goal is to solve the problem not which tool to choose. However, a good tool needs to be flexible and scalable. Modeling Skills Data scientists need to know statistical and machine learning models. There is no clear line separating these two. Many statistical models are also machine learning models, vice versa. Generally speaking, a data scientist is familiar with basic statistical tests such as t-test, chi-square test, and analysis of variance. They can explain the difference between Spearman rank correlation and Pearson correlation, be aware of basic sampling schemes, such as Simple Random Sampling, Stratified Random Sampling, and Multi-Stage Sampling. Know commonly used probability distributions such as Normal distribution, Binomial distribution, Poisson distribution, F distribution, T distribution, and Chi-square distribution. Experimental design plays a significant role in the biological study. Understanding the main tenants of Bayesian methods is necessary (at least be able to write the Bayes theorem on the whiteboard and know what does it mean). Know the difference between supervised and unsupervised learning. Understand commonly used cluster algorithms, classifiers, and regression models. Some powerful tools in predictive analytics are tree models (such as random forest and AdaBoost) and penalized model (such as lasso and SVM). Data scientist working on social science (such as consumer awareness surveys), also needs to know the latent variable model, such as exploratory factor analysis, confirmatory factor analysis, structural equation model. Is the list getting a little scary? It can get even longer. Don’t worry if you don’t know all of them now. You will learn as you go. Standard mathematics, statistics or computer science training in graduate school can get you started. But you have to learn lots of new skills after school. Learning is happening increasingly outside of formal educational settings and in unsupervised environments. An excellent data scientist must be a lifetime learner. Fortunately, technological advantages provide new tools and opportunities for lifetime learners, MOOC, online data science workshops and various online tutorials. So above all, self-learning ability is the most critical skill. Soft Skills In addition to technical knowledge, there are some critical soft skills. These include the ability to translate practical problems into data problems, excellent communication skill, attention to detail, storytelling and so on. We will discuss it in a later chapter in more detail. "],
["types-of-learning.html", "1.5 Types of Learning", " 1.5 Types of Learning There are three broad groups of styles: supervised learning, reinforcement learning, and unsupervised learning. In supervised learning, each observation of the predictor measurement(s) corresponds to a response measurement. There are two flavors of supervised learning: regression and classification. In regression, the response is a real number such as the total net sales in 2017, or the yield of corn next year. The goal is to approximate the response measurement as much as possible. In classification, the response is a class label, such as dichotomous response such as yes/no. The response can also have more than two categories, such as four segments of customers. A supervised learning model is a function that maps some input variables with corresponding parameters to a response y. Modeling tuning is to adjust the value of parameters to make the mapping fit the given response. In other words, it is to minimize the discrepancy between given response and the model output. When the response y is a real value, it is intuitive to define discrepancy as the squared difference between model output and given the response. When y is categorical, there are other ways to measure the difference, such as AUC or information gain. In reinforcement learning, the correct input/output pairs are not present. The model will learn from a sequence of actions and select the action maximizing the expected sum of the future rewards. There is a discount factor that makes future rewards less valuable than current rewards. Reinforcement learning is difficult for the following reasons: The rewards are not instant. If the action sequence is long, it is hard to know which action was wrong. The rewards are occasional. Each reward does not supply much information, so its impact of parameter change is limited. Typically, it is not likely to learn a large number of parameters using reinforcement learning. However, it is possible for supervised and unsupervised learning. The number of parameters in reinforcement learning usually range from dozens to maybe 1,000, but not millions. In unsupervised learning, there is no response variable. For a long time, the machine learning community overlooked unsupervised learning except for one called clustering. Moreover, many researchers thought that clustering was the only form of unsupervised learning. One reason is that it is hard to define the goal of unsupervised learning explicitly. Unsupervised learning can be used to do the following: Identify a good internal representation or pattern of the input that is useful for subsequent supervised or reinforcement learning, such as finding clusters. It is a dimension reduction tool that is to provide compact, low dimensional representations of the input, such as factor analysis. Provide a reduced number of uncorrelated learned features from original variables, such as principle component regression. "],
["types-of-algorithm.html", "1.6 Types of Algorithm", " 1.6 Types of Algorithm The summary of various algorithms for data science in this section is based on Jason Brownlee’s blog “(A Tour of Machine Learning Algorithms)[http://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/].” We added and subtracted some algorithms in each category and gave additional comments. The categorization here is based on the structure (such as tree model, Regularization Methods) or type of question to answer (such as regression). It is far less than perfect but will help to show a bigger map of different algorithms. Some can be legitimately classified into multiple categories, such as support vector machine (SVM) can be a classifier, and can also be used for regression. So you may see other ways of grouping. Also, the following summary does not list all the existing algorithms (there are just too many). Regression Regression can refer to the algorithm or a particular type of problem. It is supervised learning. Regression is one of the oldest and most widely used statistical models. It is often called the statistical machine learning method. Standard regression models are: Ordinary Least Squares Regression Logistic Regression Multivariate Adaptive Regression Splines (MARS) Locally Estimated Scatterplot Smoothing (LOESS) The least squares regression and logistic regression are traditional statistical models. Both of them are highly interpretable. MARS is similar to neural networks and partial least squares (PLS) in the respect that they all use surrogate features instead of original predictors. They differ in how to create the surrogate features. PLS and neural networks use linear combinations of the original predictors as surrogate features.1 MARS creates two contrasted versions of a predictor by a truncation point. And LOESS is a non-parametric model, usually only used in visualization. Similarity-based Algorithms This type of model is based on a similarity measure. There are three main steps: (1) compare the new sample with the existing ones; (2) search for the closest sample; (3) and let the response of the nearest sample be used as the prediction. K-Nearest Neighbour [KNN] Learning Vector Quantization [LVQ] Self-Organizing Map [SOM] The biggest advantage of this type of model is that they are intuitive. K-Nearest Neighbour is generally the most popular algorithm in this set. The other two are less common. The key to similarity based algorithms is to find an appropriate distance metric for your data. Feature Selection Algorithms The primary purpose of feature selection is to exclude non-information or redundant variables and also reduce dimension. Although it is possible that all the independent variables are significant for explaining the response. But more often, the response is only related to a portion of the predictors. We will expand the feature selection in detail later. Filter method Wrapper method Embedded method Filter method focuses on the relationship between a single feature and a target variable. It evaluates each feature (or an independent variable) before modeling and selects “important” variables. Wrapper method removes the variable according to particular law and finds the feature combination that optimizes the model fitting by evaluating a set of feature combinations. In essence, it is a searching algorithm. Embedding method is part of the machine learning model. Some model has built-in variable selection function such as lasso, and decision tree. Regularization Method This method itself is not a complete model, but rather an add-on to other models (such as regression models). It appends a penalty function on the criteria used by the original model to estimate the variables (such as likelihood function or sum of squared error). In this way, it penalizes model complexity and contracts the model parameters. That is why people call them “shrinkage method.” This approach is advantageous in practice. Ridge Regression Least Absolute Shrinkage and Selection Operator (LASSO) Elastic Net Decision Tree Decision trees are no doubt one of the most popular machine learning algorithms. Thanks to all kinds of software, implementation is a no brainer which requires nearly zero understanding of the mechanism. The followings are some of the common trees: Classification and Regression Tree (CART) Iterative Dichotomiser 3 (ID3) C4.5 Random Forest Gradient Boosting Machines (GBM) Bayesian Models People usually confuse Bayes theorem with Bayesian models. Bayes theorem is an implication of probability theory which gives Bayesian data analysis its name. \\[Pr(\\theta|y)=\\frac{Pr(y|\\theta)Pr(\\theta)}{Pr(y)}\\] The actual Bayesian model is not identical to Bayes theorem. Given a likelihood, parameters to estimate, and a prior for each parameter, a Bayesian model treats the estimates as a purely logical consequence of those assumptions. The resulting estimates are the posterior distribution which is the relative plausibility of different parameter values, conditional on the observations. The Bayesian model here is not strictly in the sense of Bayesian but rather model using Bayes theorem. Naïve Bayes Averaged One-Dependence Estimators (AODE) Bayesian Belief Network (BBN) Kernel Methods The most common kernel method is the support vector machine (SVM). This type of algorithm maps the input data to a higher order vector space where classification or regression problems are easier to solve. Support Vector Machine (SVM) Radial Basis Function (RBF) Linear Discriminate Analysis (LDA) Clustering Methods Like regression, when people mention clustering, sometimes they mean a class of problems, sometimes a class of algorithms. The clustering algorithm usually clusters similar samples to categories in a centroidal or hierarchical manner. The two are the most common clustering methods: K-Means Hierarchical Clustering Association Rule The basic idea of an association rule is: when events occur together more often than one would expect from their individual rates of occurrence, such co- occurrence is an interesting pattern. The most used algorithms are: Apriori algorithm Eclat algorithm Artificial Neural Network The term neural network has evolved to encompass a repertoire of models and learning methods. There has been lots of hype around the model family making them seem magical and mysterious. A neural network is a two-stage regression or classification model. The basic idea is that it uses linear combinations of the original predictors as surrogate features, and then the new features are put through non-linear activation functions to get hidden units in the 2nd stage. When there are multiple hidden layers, it is called deep learning, another over hyped term. Among varieties of neural network models, the most widely used “vanilla” net is the single hidden layer back-propagation network. Perceptron Neural Network Back Propagation Hopield Network Self-Organizing Map (SOM) Learning Vector Quantization (LVQ) Deep Learning The name is a little misleading. As mentioned before, it is multilayer neural network. It is hyped tremendously especially after AlphaGO defeated Li Shishi at the board game Go. We don’t have too much experience with the application of deep learning and are not in the right position to talk more about it. Here are some of the common algorithms: Restricted Boltzmann Machine (RBN) Deep Belief Networks (DBN) Convolutional Network Stacked Autoencoders Long short-term memory (LSTM) Dimensionality Reduction Its purpose is to construct new features that have significant physical or statistical characteristics, such as capturing as much of the variance as possible. Principle Component Analysis (PCA) Partial Least Square Regression (PLS) Multi-Dimensional Scaling (MDS) Exploratory Factor Analysis (EFA) PCA attempts to find uncorrelated linear combinations of original variables that can explain the variance to the greatest extent possible. EFA also tries to explain as much variance as possible in a lower dimension. MDS maps the observed similarity to a low dimension, such as a two-dimensional plane. Instead of extracting underlying components or latent factors, MDS attempts to find a lower-dimensional map that best preserves all the observed similarities between items. So it needs to define a similarity measure as in clustering methods. Ensemble Methods Ensemble method made its debut in the 1990s. The idea is to build a prediction model by combining the strengths of a collection of simpler base models. Bagging, originally proposed by Leo Breiman, is one of the earliest ensemble methods. After that, people developed Random Forest (T 1998; Y and D 1997) and Boosting method (V. L 1984; M and L 1989). This is a class of powerful and effective algorithms. Bootstrapped Aggregation (Bagging) Random Forest Gradient Boosting Machine (GBM) --> --> References "],
["soft-skills-for-data-scientists.html", "Chapter 2 Soft Skills for Data Scientists ", " Chapter 2 Soft Skills for Data Scientists "],
["comparison-between-statistician-and-data-scientist.html", "2.1 Comparison between Statistician and Data Scientist", " 2.1 Comparison between Statistician and Data Scientist Statistics as a scientific area can be traced back to 1749 and statistician as a career has been around for hundreds of years with well-established theory and application. Data Scientist becomes an attractive career for only a few years along with the fact that data size and variety beyond the traditional statistician’s toolbox and the fast growing of computation power. Statistician and data scientist have a lot of common backgrounds, but there are also some significant differences. Both statistician and data scientist work closely with data. For the traditional statistician, the data is usually well-formatted text files with numbers and labels. The size of the data usually can be fitted in a PC’s memory. Comparing to statisticians, data scientists need to deal with more varieties of data: well-formatted data stored in a database system with size much larger than a PC’s memory or hard-disk; huge amount of verbatim text, voice, image, and video; real-time streaming data and other types of records. One particular power of statistics is that statistician can fit model and make an inference based on limited data. It is quite common that once the data is given and cleaned, the majority of the work is developed different models around the data. Today, data is relatively abundant, and modeling is just part of the overall effort. The focus is to deliver actionable results. Different from statisticians, data scientists, sometimes need to fit model on the cloud instead of reading data in since the data size is too large. From the entire problem-solving cycle, statisticians are usually not well integrated with the production system where data is obtained in real time; while data scientists are more embedded in the production system and closer to the data generation procedures. "],
["where-data-science-team-fits.html", "2.2 Where Data Science Team Fits?", " 2.2 Where Data Science Team Fits? During the past decade, a huge amount of data has become available and readily accessible for analysis in many companies across different business sectors. The size, complexity, and speed of increment of data suddenly beyond the traditional scope of statistical analysis or BI reporting as mentioned above. To leverage the big data, many companies have established new data science organizations. Companies have gone through different paths to create their own data science and machine learning organizations. There are three major formats of data science teams: independent of any current organizations and the team report directly to senior leadership; within each business unit and the team report to business unit leaders; within in the traditional IT organizations and the team report to IT leaders. Companies are different in many aspects, but in general, the most efficient option to mine big data is a team of data scientist independent of business units and IT organizations. The independence enables the data science team to collaborate across business units and IT organizations more efficiently and the independence also provides flexibility and potential to solve corporate level strategic big data problems. For each business units, there are many business unit specific data science related problems and embedding data scientist within each business units is also an efficient way to solve business unit specific data science problems. The full cycle of data science projects from data to decision (i.e. Data -&gt; Information -&gt; Knowledge -&gt; Insight -&gt; Decision) is relatively difficult to achieve if the data science team is part of traditional IT organizations. "],
["beyond-data-and-analytics.html", "2.3 Beyond Data and Analytics", " 2.3 Beyond Data and Analytics Data scientists usually have a good sense of data and analytics, but data scientist project is definitely more than just data and analytics. A data science project may involve people with many different roles: a business owner or leader to identify opportunities in business value; program managers to ensure each data science project fit into the overall technical program development; data owners and computation resource and infrastructure owners from IT department; dedicated team to make sure the data and model are under model governance and privacy guidelines; a team to implement, maintain and refresh the model; project managers to coordinate all parties to set periodical tasks so that the project meets the preset milestones and delivery results; multiple rounds of discussion of resource allocation (i.e. who will pay for the data science project). Effective communication and in-depth domain knowledge about the business problem are essential requirements for a successful data scientist. A data scientist will interact with people at various levels ranging from senior leaders who are setting the corporate strategies to front line employees who are doing the daily work. A data scientist needs to have the capability to view the problem from 10,000 feet above ground, as well as down to the detail to the very bottom. To convert a business question into a data problem, a data scientist needs to communicate using the language the other people can understand and obtain the required information. "],
["data-scientist-as-a-leader.html", "2.4 Data Scientist as a Leader", " 2.4 Data Scientist as a Leader During the entire process of data science project defining, planning, executing and implementation, the data scientist lead needs to be involved in every step to ensure the business problem is defined correctly and the business value and success metric are evaluated reasonable. Corporates are investing heavily in data science and machine learning with a very high expectation of big return. There are too many opportunities to introduce unrealistic goal and business impact for a particular data science project. The leading data scientist need to be the leader in these discussions to define the goal backed by data and analytics. Many data science projects over promise in deliverables and too optimistic on the timeline and these projects eventually fail by not delivering the preset business impact within the timeline. As the data scientist in the team, we need to identify these issues early in the stage and communicate to the entire team to make sure the project has a realistic deliverable and timeline. The data scientist team also need to work closely with data owners to identify relevant internal and external data source and evaluate the quality of the data; as well as working closely with the computation infrastructure team to understand the computation resources (i.e. hardware and software) available for the data science project. "],
["three-pillars-of-knowledge.html", "2.5 Three Pillars of Knowledge", " 2.5 Three Pillars of Knowledge The following picture summarizes the needed three pillars of knowledge to be a successful data scientist. A successful data scientist needs to have a strong technical background in data mining, statistics and machine learning. The in-depth understanding of modeling with the insight about data enable a data scientist to convert a business problem to a data science problem. A successful data scientist needs some domain knowledge to understand business problem. For any data science project, the data scientist need to collaborate with other team members and effective communication and leadership skills are critical, especially when you are the only data person in the room and you need to make a decision with uncertainty. The last pillar is about computation environment and model implementation in big data platform. This used to be the most difficult one for a data scientist with statistics background (i.e. lack computer science or programming skills). The good news is that with the rise of cloud computation big data platform, this barrier is getting easier for a statistician to overcome and we will discuss in more detail in next chapter. "],
["common-pitfalls-of-data-science-projects.html", "2.6 Common Pitfalls of Data Science Projects", " 2.6 Common Pitfalls of Data Science Projects Data science projects are usually complicated in nature, and many of these data science projects eventually fail due to various reasons. We will briefly discuss a few common pitfalls in data science projects and how to avoid them. Solve the wrong problem: data science project usually starts with a very vague description and a few rounds of detailed discussion with all stakeholders involved are needed to define the busses problem. There will be lots of opportunities to introduce misalignment when mapping the business problem into specific data science methods. Especially when the quality and availability of the data are not as good as what is expected at the first place. If not well-communicated during the project, the final data science solution may not be the right one to solve the business problem. As the data scientist (sometimes the only data scientist) in the room, we must understand the business problem thoroughly and communicate regularly to business partners especially there is a change of status to make sure everyone is aligned with the progress and final deliverables. Over promise on business value: business leaders usually have high expectation on data science projects and the goal of business value and deliverables sometimes are set unrealistic and eventually beyond the scope of available data and computation resource. As the data scientist (sometimes the only data scientist) in the room, we must have our voice heard based on fact (i.e. data, analytics, and resources) instead of wishful thinking. Backed with fact-based evidence, it is easier to communicate what is a realistic goal for the entire team. Too optimistic about the timeline: there are lots of uncertainties in data science projects such as the data source availability and data quality, computation hardware and software, resource availability in the business team, implementation team and IT department, as well as project direction change which may delay the final delivery date. To have a better-estimated timeline, get as much detail as possible for all the needed tasks and estimated each task individually and reach out to each team member to confirm their availability. Most importantly, communicate with the entire team if there are blocking factors for the project in a prompt way such that everyone aware of the situation and potential impact on the timeline. Too optimistic about data availability and quality: the most important asset in data science project is data. Even though we are at the big data age, often times there is not enough relevant data for the data science projects. The data quality is also a general problem for data science projects. A thorough data availability and quality check are needed at the beginning of the data science project to estimate the needed effort to obtain data as well as data cleaning. Model cannot be scaled: be careful if you use a subset of data to fit the model and then scale it to the entire dataset. When developing the model using a smaller dataset, we must keep in mind how much computation resources needed for the whole dataset. With limited computation resource, it is important to maximize the computation time in production to a reasonable level based on the business application when fits the model with a sample dataset. Take too long to fail: data science projects usually are trying to push the boundary of current applications to new territory, people do not expect all data science projects to be successful. Fail fast is generally good practice such that we can quickly find a better way to solve the problem. A data scientist needs to have an open mindset to not stuck with one idea or one approach for a long time to avoid taking too long to fail. -->"],
["introduction-to-the-data.html", "Chapter 3 Introduction to the data", " Chapter 3 Introduction to the data Before tackling analytics problem, we start by creating data to be analyzed in later chapters. Why do we simulate data instead of using real data set? Going through the simulation code helps you practice R skills. It makes the book less dependent on downloading online data sets. It allows you manipulate the synthetic data, run analysis and examine how the results change. The authors do not need to worry about intellectual property rights. "],
["customer-data-for-clothing-company.html", "3.1 Customer Data for Clothing Company", " 3.1 Customer Data for Clothing Company Our first data set represents customers of a clothing company who sells products in stores and online. This data is typical of what one might get from a company’s marketing data base (the data base will have more data than the one we show here). This data includes 1000 customers for whom we have 3 types of data: Demography age: age of the respondent gender: male/female house: 0/1 variable indicating if the customer owns a house or not Sales in the past year store_exp: expense in store online_exp: expense online store_trans: times of store purchase online_trans: times of online purchase Survey on product preference It is common for companies to survey their customers and draw insights to guide future marketing activities. The survey is as below: How strongly do you agree or disagree with the following statements: Strong disagree Disagree Neither agree nor disagree Agree Strongly agree Q1. I like to buy clothes from different brands Q2. I buy almost all my clothes from some of my favorite brands Q3. I like to buy premium brands Q4. Quality is the most important factor in my purchasing decision Q5. Style is the most important factor in my purchasing decision Q6. I prefer to buy clothes in store Q7. I prefer to buy clothes online Q8. Price is important Q9. I like to try different styles Q10. I like to make a choice by myself and don’t need too much of others’ suggestions There are 4 segments of customers: Price Conspicuous Quality Style The simulation is not very straightforward and we will break it into three parts: Define data structure: variable names, variable distribution, customer segment names, segment size Variable distribution parameters: mean and variance Iterate across segments and variables. Simulate data according to specific parameters assigned By organizing code this way, it makes easy for us to change specific parts of the simulation. For example, if we want to change the distribution of one variable, we can just change the corresponding part of the code. Here is code to define data structure: # set a random number seed to make the process repeatable set.seed(12345) # define the number of observations ncust&lt;-1000 # create a data frmae for simulated data seg_dat&lt;-data.frame(id=as.factor(c(1:ncust))) # assign the variable names vars&lt;-c(&quot;age&quot;,&quot;gender&quot;,&quot;income&quot;,&quot;house&quot;,&quot;store_exp&quot;,&quot;online_exp&quot;,&quot;store_trans&quot;,&quot;online_trans&quot;) # assign distribution for each variable vartype&lt;-c(&quot;norm&quot;,&quot;binom&quot;,&quot;norm&quot;,&quot;binom&quot;,&quot;norm&quot;,&quot;norm&quot;,&quot;pois&quot;,&quot;pois&quot;) # names of 4 segments group_name&lt;-c(&quot;Price&quot;,&quot;Conspicuous&quot;,&quot;Quality&quot;,&quot;Style&quot;) # size of each segments group_size&lt;-c(250,200,200,350) The next step is to define variable distribution parameters. There are 4 segments of customers and 8 parameters. Different segments correspond to different parameters. Let’s store the parameters in a 4×8 matrix: # matrix for mean mus &lt;- matrix( c( # Price 60, 0.5, 120000,0.9, 500,200,5,2, # Conspicuous 40, 0.7, 200000,0.9, 5000,5000,10,10, # Quality 36, 0.5, 70000, 0.4, 300, 2000,2,15, # Style 25, 0.2, 90000, 0.2, 200, 2000,2,20), ncol=length(vars), byrow=TRUE) # matrix for variance sds&lt;- matrix( c( # Price 3,NA,8000,NA,100,50,NA,NA, # Conspicuous 5,NA,50000,NA,1000,1500,NA,NA, # Quality 7,NA,10000,NA,50,200,NA,NA, # Style 2,NA,5000,NA,10,500,NA,NA), ncol=length(vars), byrow=TRUE) Now we are ready to simulate data using the parameters defined above: # simulate non-survey data sim.dat&lt;-NULL set.seed(2016) # loop on customer segment (i) for (i in seq_along(group_name)){ # add this line in order to moniter the process cat (i, group_name[i],&quot;\\n&quot;) # create an empty matrix to store relevent data seg&lt;-data.frame(matrix(NA,nrow=group_size[i], ncol=length(vars))) # Simulate data within segment i for (j in seq_along(vars)){ # loop on every variable (j) if (vartype[j]==&quot;norm&quot;){ # simulate normal distribution seg[,j]&lt;-rnorm(group_size[i], mean=mus[i,j], sd=sds[i,j]) } else if (vartype[j]==&quot;pois&quot;) { # simulate poisson distribution seg[,j]&lt;-rpois(group_size[i], lambda=mus[i,j]) } else if (vartype[j]==&quot;binom&quot;){ # simulate binomial distribution seg[,j]&lt;-rbinom(group_size[i],size=1,prob=mus[i,j]) } else{ # if the distribution name is not one of the above, stop and return a message stop (&quot;Don&#39;t have type:&quot;,vartype[j]) } } sim.dat&lt;-rbind(sim.dat,seg) } Now let’s edit the data we just simulated a little by adding tags to 0/1 binomial variables: # assign variable names names(sim.dat)&lt;-vars # assign factor levels to segment variable sim.dat$segment&lt;-factor(rep(group_name,times=group_size)) # recode gender and house variable sim.dat$gender&lt;-factor(sim.dat$gender, labels=c(&quot;Female&quot;,&quot;Male&quot;)) sim.dat$house&lt;-factor(sim.dat$house, labels=c(&quot;No&quot;,&quot;Yes&quot;)) # store_trans and online_trans are at least 1 sim.dat$store_trans&lt;-sim.dat$store_trans+1 sim.dat$online_trans&lt;-sim.dat$online_trans+1 # age is integer sim.dat$age&lt;-floor(sim.dat$age) In the real world, the data always includes some noise such as missing, wrong imputation. So we will add some noise to the data: # add missing values idxm &lt;- as.logical(rbinom(ncust, size=1, prob=sim.dat$age/200)) sim.dat$income[idxm]&lt;-NA # add wrong imputations and outliers set.seed(123) idx&lt;-sample(1:ncust,5) sim.dat$age[idx[1]]&lt;-300 sim.dat$store_exp[idx[2]]&lt;- -500 sim.dat$store_exp[idx[3:5]]&lt;-c(50000,30000,30000) So far we have created part of the data. You can check it using `summary(sim.dat).’ Next, we will move on to simulate survey data. # number of survey questions nq&lt;-10 # mean matrix for different segments mus2 &lt;- matrix( c( # Price 5,2,1,3,1,4,1,4,2,4, # Conspicuous 1,4,5,4,4,4,4,1,4,2, # Quality 5,2,3,4,3,2,4,2,3,3, # Style 3,1,1,2,4,1,5,3,4,2), ncol=nq, byrow=TRUE) # assume the variance is 0.2 for all sd2&lt;-0.2 sim.dat2&lt;-NULL set.seed(1000) # loop for customer segment (i) for (i in seq_along(group_name)){ # the following line is used for checking the progress # cat (i, group_name[i],&quot;\\n&quot;) # create an empty data frame to store data seg&lt;-data.frame(matrix(NA,nrow=group_size[i], ncol=nq)) # simulate data within segment for (j in 1:nq){ # simulate normal distribution res&lt;-rnorm(group_size[i], mean=mus2[i,j], sd=sd2) # set upper and lower limit res[res&gt;5]&lt;-5 res[res&lt;1]&lt;-1 # convert continuous values to discrete integers seg[,j]&lt;-floor(res) } sim.dat2&lt;-rbind(sim.dat2,seg) } names(sim.dat2)&lt;-paste(&quot;Q&quot;,1:10,sep=&quot;&quot;) sim.dat&lt;-cbind(sim.dat,sim.dat2) sim.dat$segment&lt;-factor(rep(group_name,times=group_size)) So far we have gotten all the data. Let’s check it: str(sim.dat,vec.len=3) ## &#39;data.frame&#39;: 1000 obs. of 19 variables: ## $ age : int 57 63 59 60 51 59 57 57 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 1 1 2 2 2 2 2 2 ... ## $ income : num 120963 122008 114202 113616 ... ## $ house : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 2 2 2 2 2 2 2 ... ## $ store_exp : num 529 478 491 348 ... ## $ online_exp : num 304 110 279 142 ... ## $ store_trans : int 2 4 7 10 4 4 5 11 ... ## $ online_trans: int 2 2 2 2 4 5 3 5 ... ## $ Q1 : int 4 4 5 5 4 4 4 5 ... ## $ Q2 : int 2 1 2 2 1 2 1 2 ... ## $ Q3 : int 1 1 1 1 1 1 1 1 ... ## $ Q4 : int 2 2 2 3 3 2 2 3 ... ## $ Q5 : int 1 1 1 1 1 1 1 1 ... ## $ Q6 : int 4 4 4 4 4 4 4 4 ... ## $ Q7 : int 1 1 1 1 1 1 1 1 ... ## $ Q8 : int 4 4 4 4 4 4 4 4 ... ## $ Q9 : int 2 1 1 2 2 1 1 2 ... ## $ Q10 : int 4 4 4 4 4 4 4 4 ... ## $ segment : Factor w/ 4 levels &quot;Conspicuous&quot;,..: 2 2 2 2 2 2 2 2 ... "],
["customer-satisfaction-survey-data-from-airline-company.html", "3.2 Customer Satisfaction Survey Data from Airline Company", " 3.2 Customer Satisfaction Survey Data from Airline Company We will simulate a customer satisfaction survey for three airline companies. There are N=1000 respondents and 15 questions. The market researcher asked respondents to recall the experience with different airline companies and assign a score (1-9) to each airline company for all the 15 questions. The higher the score, the more satisfied the customer to the specific item. The 15 questions are of 4 types (the variable names are in the parentheses): How satisfied are you with your______? Ticketing Ease of making reservation（Easy_Reservation） Availability of preferred seats（Preferred_Seats） Variety of flight options（Flight_Options） Ticket prices（Ticket_Prices） Aircraft Seat comfort（Seat_Comfort） Roominess of seat area（Seat_Roominess） Availability of Overhead（Overhead_Storage） Cleanliness of aircraft（Clean_Aircraft） Service Courtesy of flight attendant（Courtesy） Friendliness（Friendliness） Helpfulness（Helpfulness） Food and drinks（Service） General Overall satisfaction（Satisfaction） Purchase again（Fly_Again） Willingness to recommend（Recommend） # Create a matrix of factor loadings # This pattern is called bifactor because it has a general factor for separate components. # For example, &quot;Ease of making reservation&quot; has general factor loading 0.33, specific factor loading 0.58 # The outcome variables are formed as combinations of these general and specific factors loadings &lt;- matrix(c ( # Ticketing .33, .58, .00, .00, # Ease of making reservation .35, .55, .00, .00, # Availability of preferred seats .30, .52, .00, .00, # Variety of flight options .40, .50, .00, .00, # Ticket prices # Aircraft .50, .00, .55, .00, # Seat comfort .41, .00, .51, .00, # Roominess of seat area .45, .00, .57, .00, # Availability of Overhead .32, .00, .54, .00, # Cleanliness of aircraft # Service .35, .00, .00, .50, # Courtesy of flight attendant .38, .00, .00, .57, # Friendliness .60, .00, .00, .50, # Helpfulness .52, .00, .00, .58, # Food and drinks # General .43, .10, .30, .30, # Overall satisfaction .35, .50, .40, .20, # Purchase again .25, .50, .50, .20), # Willingness to recommend nrow=15,ncol=4, byrow=TRUE) # Matrix multiplication produces the correlation matrix except for the diagonal cor_matrix&lt;-loadings %*% t(loadings) # Diagonal set to ones diag(cor_matrix)&lt;-1 # use the mvtnorm package to randomly generate a data set with a given correlation pattern library(mvtnorm) # mean vectors of the 3 airline companies mu1=c(5,6,5,6, 7,8,6,7, 5,5,5,5, 6,6,6) mu2=c(3,3,2,3, 5,4,5,6, 8,8,8,8, 3,3,3) mu3=c(2,2,2,2, 8,8,8,8, 8,8,8,8, 8,8,8) # set random seed set.seed(123456) # respondent ID resp.id &lt;- 1:1000 library(MASS) rating1 &lt;- mvrnorm(length(resp.id), mu=mu1, Sigma=cor_matrix) rating2 &lt;- mvrnorm(length(resp.id), mu=mu2, Sigma=cor_matrix) rating3 &lt;- mvrnorm(length(resp.id), mu=mu3, Sigma=cor_matrix) # truncates scale to be between 1 and 9 rating1[rating1&gt;9]&lt;-9 rating1[rating1&lt;1]&lt;-1 rating2[rating2&gt;9]&lt;-9 rating2[rating2&lt;1]&lt;-1 rating3[rating3&gt;9]&lt;-9 rating3[rating3&lt;1]&lt;-1 # Round to single digit rating1&lt;-data.frame(round(rating1,0)) rating2&lt;-data.frame(round(rating2,0)) rating3&lt;-data.frame(round(rating3,0)) rating1$ID&lt;-resp.id rating2$ID&lt;-resp.id rating3$ID&lt;-resp.id rating1$Airline&lt;-rep(&quot;AirlineCo.1&quot;,length(resp.id)) rating2$Airline&lt;-rep(&quot;AirlineCo.2&quot;,length(resp.id)) rating3$Airline&lt;-rep(&quot;AirlineCo.3&quot;,length(resp.id)) rating&lt;-rbind(rating1,rating2,rating3) # assign names to the variables in the data frame names(rating)&lt;-c( &quot;Easy_Reservation&quot;, &quot;Preferred_Seats&quot;, &quot;Flight_Options&quot;, &quot;Ticket_Prices&quot;, &quot;Seat_Comfort&quot;, &quot;Seat_Roominess&quot;, &quot;Overhead_Storage&quot;, &quot;Clean_Aircraft&quot;, &quot;Courtesy&quot;, &quot;Friendliness&quot;, &quot;Helpfulness&quot;, &quot;Service&quot;, &quot;Satisfaction&quot;, &quot;Fly_Again&quot;, &quot;Recommend&quot;, &quot;ID&quot;, &quot;Airline&quot;) Now check the data frame we have: str(rating,vec.len=3) ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 3000 obs. of 17 variables: ## $ Easy_Reservation: int 6 5 6 5 4 5 6 4 ... ## $ Preferred_Seats : int 5 7 6 6 5 6 6 6 ... ## $ Flight_Options : int 4 7 5 5 3 4 6 3 ... ## $ Ticket_Prices : int 5 6 6 5 6 5 5 5 ... ## $ Seat_Comfort : int 5 6 7 7 6 6 6 4 ... ## $ Seat_Roominess : int 7 8 6 8 7 8 6 5 ... ## $ Overhead_Storage: int 5 5 7 6 5 4 4 4 ... ## $ Clean_Aircraft : int 7 6 7 7 7 7 6 4 ... ## $ Courtesy : int 5 6 6 4 2 5 5 4 ... ## $ Friendliness : int 4 6 6 6 3 4 5 5 ... ## $ Helpfulness : int 6 5 6 4 4 5 5 4 ... ## $ Service : int 6 5 6 5 3 5 5 5 ... ## $ Satisfaction : int 6 7 7 5 4 6 5 5 ... ## $ Fly_Again : int 6 6 6 7 4 5 3 4 ... ## $ Recommend : int 3 6 5 5 4 5 6 5 ... ## $ ID : int 1 2 3 4 5 6 7 8 ... ## $ Airline : chr &quot;AirlineCo.1&quot; &quot;AirlineCo.1&quot; &quot;AirlineCo.1&quot; ... "],
["swine-disease-breakout-data.html", "3.3 Swine Disease Breakout Data", " 3.3 Swine Disease Breakout Data In this section, we are going to simulate a data set about swine disease. We simulate 800 farms (i.e. n=800) and 120 survey questions (i.e. G=120) in each data set. There are three possible answers for each question. The outbreak status for the \\(i^{th}\\) farm is generated from a \\(Bernoulli(1, p_i)\\) distribution with \\(p_i\\) being a function of the question answers: \\[ln(\\frac{p_i}{1-p_i})=\\beta_0 + \\Sigma_{g=1}^G\\mathbf{x_{i,g}^T\\beta_{g}}\\] where \\(\\beta_0\\) is the intercept, \\(\\mathbf{x_{i,g}}\\) is a three-dimensional indication vector for question answer and \\(\\mathbf(\\beta_g)\\) is the parameter vector corresponding to the \\(g^{th}\\) predictor. Three types of questions are considered regarding their effects on the outcome. The first forty survey questions are important questions such that the coefficients of the three answers to these questions are all different: \\[\\mathbf{\\beta_g}=(1,0,-1)\\times \\gamma,\\ g=1,\\dots,40\\] The second forty survey questions are also important questions but only one answer has a coefficient that is different from the other two answers: \\[\\mathbf{\\beta_g}=(1,0,0)\\times \\gamma,\\ g=41,\\dots,80\\] The last forty survey questions are also unimportant questions such that all three answers have the same coefficients: \\[\\mathbf{\\beta_g}=(0,0,0)\\times \\gamma,\\ g=81,\\dots,120\\] The baseline coefficient \\(\\beta_0\\) is set to be \\(-\\frac{40}{3}\\gamma\\) so that on average a farm have \\(50%\\) of chance to have an outbreak. The parameter \\(\\gamma\\) in the above simulation is set to control the strength of the questions’ effect on the outcome. In this simulation study, we consider the situations where \\(\\gamma = 0.1, 0.25, 0.5, 1, 2\\). So the parameter settings are: \\[\\mathbf{\\beta^{T}}=\\left(\\underset{question\\ 1}{\\frac{40}{3},\\underbrace{1,0,-1}},...,\\underset{question\\ 40}{\\underbrace{1,0,-1}},\\underset{question\\ 41}{\\underbrace{1,0,0}},...,\\underset{question\\ 80}{\\underbrace{1,0,0}},\\underset{question\\ 81}{\\underbrace{0,0,0}},...,\\underset{question\\ 120}{\\underbrace{0,0,0}}\\right)*\\gamma\\] # sim1_da1.csv the 1st simulated data # similar sim1_da2 and sim1_da3 # sim1.csv simulated data, the first simulation # dummy.sim1.csv dummy variables for the first simulated data with all the baseline in #code for simulation # setwd(dirname(file.choose())) # library(grplasso) nf&lt;-800 for (j in 1:20){ set.seed(19870+j) x&lt;-c(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;) sim.da1&lt;-NULL for (i in 1:nf){ # sample(x, 120, replace=TRUE)-&gt;sam sim.da1&lt;-rbind(sim.da1,sample(x, 120, replace=TRUE)) } data.frame(sim.da1)-&gt;sim.da1 paste(&quot;Q&quot;, 1:120, sep = &quot;&quot;)-&gt;col paste(&quot;Farm&quot;, 1:nf, sep = &quot;&quot;)-&gt;row colnames(sim.da1)&lt;-col rownames(sim.da1)&lt;-row # use class.ind() function in nnet package to encode dummy variables library(nnet) dummy.sim1&lt;-NULL for (k in 1:ncol(sim.da1)) { tmp=class.ind(sim.da1[,k]) colnames(tmp)=paste(col[k],colnames(tmp)) dummy.sim1=cbind(dummy.sim1,tmp) } data.frame(dummy.sim1)-&gt;dummy.sim1 # set &quot;C&quot; as the baseline # delete baseline dummy variable base.idx&lt;-3*c(1:120) dummy1&lt;-dummy.sim1[,-base.idx] # simulate independent variable for different values of r # simulate based on one value of r each time # r=0.1, get the link function c(rep(c(1/10,0,-1/10),40),rep(c(1/10,0,0),40),rep(c(0,0,0),40))-&gt;s1 as.matrix(dummy.sim1)%*%s1-40/3/10-&gt;link1 # r=0.25 # c(rep(c(1/4,0,-1/4),40),rep(c(1/4,0,0),40),rep(c(0,0,0),40))-&gt;s1 # as.matrix(dummy.sim1)%*%s1-40/3/4-&gt;link1 # r=0.5 # c(rep(c(1/2,0,-1/2),40),rep(c(1/2,0,0),40),rep(c(0,0,0),40))-&gt;s1 # as.matrix(dummy.sim1)%*%s1-40/3/2-&gt;link1 # r=1 # c(rep(c(1,0,-1),40),rep(c(1,0,0),40),rep(c(0,0,0),40))-&gt;s1 # as.matrix(dummy.sim1)%*%s1-40/3-&gt;link1 # r=2 # c(rep(c(2,0,-2),40),rep(c(2,0,0),40),rep(c(0,0,0),40))-&gt;s1 # as.matrix(dummy.sim1)%*%s1-40/3/0.5-&gt;link1 # calculate the outbreak probability exp(link1)/(exp(link1)+1)-&gt;hp1 # based on the probability hp1, simulate response variable: res res&lt;-rep(9,nf) for (i in 1:nf){ sample( c(1,0),1,prob=c(hp1[i],1-hp1[i]))-&gt;res[i] } # da1 with response variable, without group indicator # da2 without response variable, with group indicator # da3 without response variable, without group indicator dummy1$y&lt;-res da1&lt;-dummy1 y&lt;-da1$y ind&lt;-NULL for (i in 1:120){ c(ind,rep(i,2))-&gt;ind } da2&lt;-rbind(da1[,1:240],ind) da3&lt;-da1[,1:240] # save simulated data write.csv(da1,paste(&#39;sim&#39;,j,&#39;_da&#39;,1,&#39;.csv&#39;,sep=&#39;&#39;),row.names=F) write.csv(da2,paste(&#39;sim&#39;,j,&#39;_da&#39;,2,&#39;.csv&#39;,sep=&#39;&#39;),row.names=F) write.csv(da3,paste(&#39;sim&#39;,j,&#39;_da&#39;,3,&#39;.csv&#39;,sep=&#39;&#39;),row.names=F) write.csv(sim.da1,paste(&#39;sim&#39;,j,&#39;.csv&#39;,sep=&#39;&#39;),row.names=F) write.csv(dummy.sim1,paste(&#39;dummy.sim&#39;,j,&#39;.csv&#39;,sep=&#39;&#39;),row.names=F) } For each value of \\(\\gamma\\), 20 data sets are simulated. The bigger \\(\\gamma\\) is, the larger the corresponding parameter. We provided the data sets with \\(\\gamma = 2\\). Let’s check the data: disease_dat&lt;-read.csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/sim1_da1.csv&quot;) # only show the last 7 columns here head(subset(disease_dat,select=c( &quot;Q118.A&quot;,&quot;Q118.B&quot;,&quot;Q119.A&quot;,&quot;Q119.B&quot;,&quot;Q120.A&quot;,&quot;Q120.B&quot;,&quot;y&quot;))) ## Q118.A Q118.B Q119.A Q119.B Q120.A Q120.B y ## 1 1 0 0 0 0 1 1 ## 2 0 1 0 1 0 0 1 ## 3 1 0 0 0 1 0 1 ## 4 1 0 0 0 0 1 1 ## 5 1 0 0 0 1 0 0 ## 6 1 0 0 1 1 0 1 Here y indicates the outbreak situation of the farms. y=1 means there is an outbreak in 5 years after the survey. The rest columns indicate survey responses. For example Q120.A = 1 means the respondent chose A in Q120. We consider C as the baseline. -->"],
["data-pre-processing.html", "Chapter 4 Data Pre-processing", " Chapter 4 Data Pre-processing Many data analysis related books focus on models, algorithms and statistical inferences. However, in practice, raw data is usually not directly used for modeling. Data preprocessing is the process of converting raw data into clean data that is proper for modeling. A model fails for various reasons. One is that the modeler doesn’t correctly preprocess data before modeling. Data preprocessing can significantly impact model results, such as imputing missing value and handling with outliers. So data preprocessing is a very critical part. In real life, depending on the stage of data cleanup, data has the following types: Raw data Technically correct data Data that is proper for the model Summarized data Data with fixed format The raw data is the first-hand data that analyst pull from the database, market survey responds from your clients, the experimental results collected by the R &amp; D department, and so on. These data may be very rough, and R sometimes can’t read them directly. The table title could be multi-line, or the format does not meet the requirements: Use 50% to represent the percentage rather than 0.5, so R will read it as a character; The missing value of the sales is represented by “-” instead of space so that R will treat the variable as character or factor type; The data is in a slideshow document, or the spreadsheet is not “.csv” but “.xlsx” … Most of the time, you need to clean the data so that R can import them. Some data format requires a specific package. Technically correct data is the data, after preliminary cleaning or format conversion, that R (or another tool you use) can successfully import it. Assume we have loaded the data into R with reasonable column names, variable format and so on. That does not mean the data is entirely correct. There may be some observations that do not make sense, such as age is negative, the discount percentage is greater than 1, or data is missing. Depending on the situation, there may be a variety of problems with the data. It is necessary to clean the data before modeling. Moreover, different models have different requirements on the data. For example, some model may require the variables are of consistent scale; some may be susceptible to outliers or collinearity, some may not be able to handle categorical variables and so on. The modeler has to preprocess the data to make it proper for the specific model. Sometimes we need to aggregate the data. For example, add up the daily sales to get annual sales of a product at different locations. In customer segmentation, it is common practice to build a profile for each segment. It requires calculating some statistics such as average age, average income, age standard deviation, etc. Data aggregation is also necessary for presentation, or for data visualization. The final table results for clients need to be in a nicer format than what used in the analysis. Usually, data analysts will take the results from data scientists and adjust the format, such as labels, cell color, highlight. It is important for a data scientist to make sure the results look consistent which makes the next step easier for data analysts. It is highly recommended to store each step of the data and the R code, making the whole process as repeatable as possible. The R markdown reproducible report will be extremely helpful for that. If the data changes, it is easy to rerun the process. In the remainder of this chapter, we will show the most common data preprocessing methods. Load the R packages first: source(&quot;https://raw.githubusercontent.com/happyrabbit/CE_JSM2017/master/Rcode/00-course-setup.R&quot;) ## Warning: Installed Rcpp (0.12.12) different from Rcpp used to build dplyr (0.12.11). ## Please reinstall dplyr to avoid random crashes or undefined behavior. "],
["data-cleaning.html", "4.1 Data Cleaning", " 4.1 Data Cleaning After you load the data, the first thing is to check how many variables are there, the type of variables, the distributions, and data errors. Let’s read and check the data: sim.dat &lt;- read.csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv &quot;) summary(sim.dat) ## age gender income ## Min. : 16.0 Female:554 Min. : 41776 ## 1st Qu.: 25.0 Male :446 1st Qu.: 85832 ## Median : 36.0 Median : 93869 ## Mean : 38.8 Mean :113543 ## 3rd Qu.: 53.0 3rd Qu.:124572 ## Max. :300.0 Max. :319704 ## NA&#39;s :184 ## house store_exp online_exp ## No :432 Min. : -500 Min. : 69 ## Yes:568 1st Qu.: 205 1st Qu.: 420 ## Median : 329 Median :1942 ## Mean : 1357 Mean :2120 ## 3rd Qu.: 597 3rd Qu.:2441 ## Max. :50000 Max. :9479 ## ## store_trans online_trans Q1 ## Min. : 1.00 Min. : 1.0 Min. :1.0 ## 1st Qu.: 3.00 1st Qu.: 6.0 1st Qu.:2.0 ## Median : 4.00 Median :14.0 Median :3.0 ## Mean : 5.35 Mean :13.6 Mean :3.1 ## 3rd Qu.: 7.00 3rd Qu.:20.0 3rd Qu.:4.0 ## Max. :20.00 Max. :36.0 Max. :5.0 ## ## Q2 Q3 Q4 ## Min. :1.00 Min. :1.00 Min. :1.00 ## 1st Qu.:1.00 1st Qu.:1.00 1st Qu.:2.00 ## Median :1.00 Median :1.00 Median :3.00 ## Mean :1.82 Mean :1.99 Mean :2.76 ## 3rd Qu.:2.00 3rd Qu.:3.00 3rd Qu.:4.00 ## Max. :5.00 Max. :5.00 Max. :5.00 ## ## Q5 Q6 Q7 ## Min. :1.00 Min. :1.00 Min. :1.00 ## 1st Qu.:1.75 1st Qu.:1.00 1st Qu.:2.50 ## Median :4.00 Median :2.00 Median :4.00 ## Mean :2.94 Mean :2.45 Mean :3.43 ## 3rd Qu.:4.00 3rd Qu.:4.00 3rd Qu.:4.00 ## Max. :5.00 Max. :5.00 Max. :5.00 ## ## Q8 Q9 Q10 ## Min. :1.0 Min. :1.00 Min. :1.00 ## 1st Qu.:1.0 1st Qu.:2.00 1st Qu.:1.00 ## Median :2.0 Median :4.00 Median :2.00 ## Mean :2.4 Mean :3.08 Mean :2.32 ## 3rd Qu.:3.0 3rd Qu.:4.00 3rd Qu.:3.00 ## Max. :5.0 Max. :5.00 Max. :5.00 ## ## segment ## Conspicuous:200 ## Price :250 ## Quality :200 ## Style :350 ## ## ## Are there any problems? Questionnaire response Q1-Q10 seem reasonable, the minimum is 1 and maximum is 5. Recall that the questionnaire score is 1-5. The number of store transactions (store_trans) and online transactions (store_trans) make sense too. Things need to pay attention are: There are some missing values. There are outliers for store expenses (store_exp). The maximum value is 50000. Who would spend $50000 a year buying clothes? Is it an imputation error? There is a negative value ( -500) in store_exp which is not logical. Someone is 300 years old. How to deal with that? Depending on the real situation, if the sample size is large enough, it will not hurt to delete those problematic samples. Here we have 1000 observations. Since marketing survey is usually expensive, it is better to set these values as missing and impute them instead of deleting the rows. # set problematic values as missings sim.dat$age[which(sim.dat$age&gt;100)]&lt;-NA sim.dat$store_exp[which(sim.dat$store_exp&lt;0)]&lt;-NA # see the results summary(subset(sim.dat,select=c(&quot;age&quot;,&quot;income&quot;))) ## age income ## Min. :16.0 Min. : 41776 ## 1st Qu.:25.0 1st Qu.: 85832 ## Median :36.0 Median : 93869 ## Mean :38.6 Mean :113543 ## 3rd Qu.:53.0 3rd Qu.:124572 ## Max. :69.0 Max. :319704 ## NA&#39;s :1 NA&#39;s :184 Now we will deal with the missing values in the data. "],
["missing-values.html", "4.2 Missing Values", " 4.2 Missing Values Missing value imputation can be the topic for a book. This section will show some of the commonly used methods without getting too deep into the topic. Chapter 7 of the book by De Waal, Pannekoek and Scholtus (Ton de Waal 2011) makes a concise overview of some of the existing imputation methods. The choice of specific method depends on the actual situation. There is no method always better than the others. One question to ask before imputation: Is there any auxiliary information? Being aware of any auxiliary information is critical. For example, if the system set customer who did not purchase as missing, then the real purchasing amount should be 0. Is missing a random occurrence? If so, it may be reasonable to impute with mean or median. If not, is there a potential mechanism for the missing data? For example, older people are more reluctant to disclose their ages in the questionnaire, so that the absence of age is not completely random. In this case, the missing values need to be estimated using the relationship between age and other independent variables. For example, use variables such as whether they have children, income, and other survey questions to build a model to predict age. Also, the purpose of modeling is important for selecting imputation methods. If the goal is to interpret the parameter estimate or statistical inference, then it is important to study the missing mechanism carefully and to estimate the missing values using non-missing information as much as possible. If the goal is to predict, people usually will not study the absence mechanism rigorously (but sometimes the mechanism is obvious). If the absence mechanism is not clear, treat it as missing at random and use mean, median, or k-nearest neighbor to impute. Since statistical inference is sensitive to missing values, researchers from survey statistics have conducted in-depth studies of various imputation schemes which focus on valid statistical inference. The problem of missing values in the prediction model is different from that in the traditional survey. Therefore, there are not many papers on missing value imputation in the prediction model. Those who want to study further can refer to Saar-Tsechansky and Provost’s comparison of different imputation methods (Saar-Tsechansky M 2007b)and De Waal, Pannekoek and Scholtus’ book (Ton de Waal 2011). 4.2.1 Impute missing values with median/mode In the case of missing at random, a common method is to imput with the mean (continuous variable) or median (categorical variables). You can use impute () function in imputeMissings package. # save the result as another object demo_imp&lt;-impute(sim.dat,method=&quot;median/mode&quot;) # check the first 5 columns, there is no missing values in other columns summary(demo_imp[,1:5]) ## age gender income ## Min. :16.0 Female:554 Min. : 41776 ## 1st Qu.:25.0 Male :446 1st Qu.: 87896 ## Median :36.0 Median : 93869 ## Mean :38.6 Mean :109923 ## 3rd Qu.:53.0 3rd Qu.:119456 ## Max. :69.0 Max. :319704 ## house store_exp ## No :432 Min. : 156 ## Yes:568 1st Qu.: 205 ## Median : 330 ## Mean : 1358 ## 3rd Qu.: 597 ## Max. :50000 After imputation, demo_imp has no missing value. This method is straightforward and widely used. The disadvantage is that it does not take into account the relationship between the variables. When there is a significant proportion of missing, it will distort the data. In this case, it is better to consider the relationship between variables and study the missing mechanism. In the example here, the missing variables are numeric. If the missing variable is a categorical/factor variable, the impute () function will imput with the mode. You can also use preProcess () function, but it is only for numeric variables, and can not imput categorical variables. Since missing values here are numeric, we can use the preProcess () function. The result is the same as the impute () function. PreProcess () is a powerful function that can link to a variety of data preprocessing methods. We will use the function later for other data preprocessing. imp&lt;-preProcess(sim.dat,method=&quot;medianImpute&quot;) demo_imp2&lt;-predict(imp,sim.dat) summary(demo_imp2[,1:5]) ## age gender income ## Min. :16.0 Female:554 Min. : 41776 ## 1st Qu.:25.0 Male :446 1st Qu.: 87896 ## Median :36.0 Median : 93869 ## Mean :38.6 Mean :109923 ## 3rd Qu.:53.0 3rd Qu.:119456 ## Max. :69.0 Max. :319704 ## house store_exp ## No :432 Min. : 156 ## Yes:568 1st Qu.: 205 ## Median : 330 ## Mean : 1358 ## 3rd Qu.: 597 ## Max. :50000 4.2.2 K-nearest neighbors K-nearest neighbor (KNN) will find the k closest samples (Euclidian distance) in the training set and imput the mean of those “neighbors”. Use preProcess() to conduct KNN: imp&lt;-preProcess(sim.dat,method=&quot;knnImpute&quot;,k=5) # need to use predict() to get KNN result demo_imp&lt;-predict(imp,sim.dat) Error in `[.data.frame`(old, , non_missing_cols, drop = FALSE) : undefined columns selected Now we get an error saying “undefined columns selected”. It is because sim.dat has non-numeric variables. The preProcess() in the first line will automatically ignore non-numeric columns so there is no error. However, there is a problem when using predict() to get the result. Removing those variable will solve the problem. # find factor columns imp&lt;-preProcess(sim.dat,method=&quot;knnImpute&quot;,k=5) idx&lt;-which(lapply(sim.dat,class)==&quot;factor&quot;) demo_imp&lt;-predict(imp,sim.dat[,-idx]) summary(demo_imp[,1:3]) ## age income store_exp ## Min. :-1.591 Min. :-1.440 Min. :-0.433 ## 1st Qu.:-0.957 1st Qu.:-0.537 1st Qu.:-0.416 ## Median :-0.182 Median :-0.376 Median :-0.371 ## Mean : 0.000 Mean : 0.024 Mean : 0.000 ## 3rd Qu.: 1.016 3rd Qu.: 0.215 3rd Qu.:-0.274 ## Max. : 2.144 Max. : 4.136 Max. :17.527 lapply(data,class) can return a list of column class. Here the data frame is sim.dat and the following code will give the list of column class: # only show the fist 3 elements lapply(sim.dat,class)[1:3] ## $age ## [1] &quot;integer&quot; ## ## $gender ## [1] &quot;factor&quot; ## ## $income ## [1] &quot;numeric&quot; Comparing the KNN result with the previous median imputation, the two are very different. This is because when you tell the preProcess () function to use KNN (the option method =&quot; knnImpute&quot;), it will automatically standardize the data. Another way is to use Bagging tree (in the next section). Note that KNN can not impute samples with the entire row missing. The reason is straightforward. Since the algorithm uses the average of its neighbors if none of them has a value, what does it use to calculate the mean? Let’s append a new row with all values missing to the original data frame to get a new object called temp. Then apply KNN to temp and see what happens: temp&lt;-rbind(sim.dat,rep(NA,ncol(sim.dat))) imp&lt;-preProcess(sim.dat,method=&quot;knnImpute&quot;,k=5) idx&lt;-which(lapply(temp,class)==&quot;factor&quot;) demo_imp&lt;-predict(imp,temp[,-idx]) Error in FUN(newX[, i], ...) : cannot impute when all predictors are missing in the new data point There is an error saying “cannot impute when all predictors are missing in the new data point”. It is easy to fix by finding and removing the problematic row: idx&lt;-apply(temp,1,function(x) sum(is.na(x)) ) as.vector(which(idx==ncol(temp))) ## [1] 1001 It shows that row 1001 is problematic. You can go ahead to delete it. 4.2.3 Bagging Tree Bagging (Bootstrap aggregating) was originally proposed by Leo Breiman. It is one of the earliest ensemble methods (B. L 1966a). When used in missing value imputation, it will use the remaining variables as predictors to train a bagging tree and then use the tree to predict the missing values. Although theoretically, the method is powerful, the computation is much more intense than KNN. In practice, there is a trade-off between computation time and the effect. If a median or mean meet the modeling needs, even bagging tree may improve the accuracy a little, but the upgrade is so marginal that it does not deserve the extra time. The bagging tree itself is a model for regression and classification. Here we use preProcess () to imput sim.dat: imp&lt;-preProcess(sim.dat,method=&quot;bagImpute&quot;) demo_imp&lt;-predict(imp,sim.dat) summary(demo_imp[,1:5]) age gender income house store_exp Min. :16.00 Female:554 Min. : 41776 No :432 Min. : 155.8 1st Qu.:25.00 Male :446 1st Qu.: 86762 Yes:568 1st Qu.: 205.1 Median :36.00 Median : 94739 Median : 329.0 Mean :38.58 Mean :114665 Mean : 1357.7 3rd Qu.:53.00 3rd Qu.:123726 3rd Qu.: 597.3 Max. :69.00 Max. :319704 Max. :50000.0 References "],
["centering-and-scaling.html", "4.3 Centering and Scaling", " 4.3 Centering and Scaling It is the most straightforward data transformation. It centers and scales a variable to mean 0 and standard deviation 1. It ensures that the criterion for finding linear combinations of the predictors is based on how much variation they explain and therefore improves the numerical stability. Models involving finding linear combinations of the predictors to explain response/predictors variation need data centering and scaling, such as PCA (Jolliffe 2002), PLS (Geladi P 1986) and EFA (Mulaik 2009). You can easily writing code yourself to conduct this transformation. Let’s standarize the variable income from sim.dat: income&lt;-sim.dat$income # calculate the mean of income mux&lt;-mean(income,na.rm=T) # calculate the standard deviation of income sdx&lt;-sd(income,na.rm=T) # centering tr1&lt;-income-mux # scaling tr2&lt;-tr1/sdx Or the function preProcess() in package caret can apply this transformation to a set of predictors. sdat&lt;-subset(sim.dat,select=c(&quot;age&quot;,&quot;income&quot;)) # set the &quot;method&quot; option trans&lt;-preProcess(sdat,method=c(&quot;center&quot;,&quot;scale&quot;)) # use predict() function to get the final result transformed&lt;-predict(trans,sdat) Now the two variables are in the same scale: summary(transformed) ## age income ## Min. :-1.591 Min. :-1.44 ## 1st Qu.:-0.957 1st Qu.:-0.56 ## Median :-0.182 Median :-0.39 ## Mean : 0.000 Mean : 0.00 ## 3rd Qu.: 1.016 3rd Qu.: 0.22 ## Max. : 2.144 Max. : 4.14 ## NA&#39;s :1 NA&#39;s :184 Sometimes you only need to scale the variable. For example, if the model adds penalty to the parameter estimates (such as \\(L_2\\) penalty is ridge regression and \\(L_1\\) penalty in LASSO), the variables need to have similar scale to ensure a fair variable selection. We are heavy user of this kind of penalty-based model in my work and we used the following quantile transformation: \\[ x_{ij}^{*}=\\frac{x_{ij}-quantile(x_{.j},0.01)}{quantile(x_{.j}-0.99)-quantile(x_{-j},0.01)} \\] The reason to use 99% and 1% quantile instead of maximum and minimum values is to resist the impact of outliers. It is easy to write a function to do it: qscale&lt;-function(dat){ for (i in 1:ncol(dat)){ up&lt;-quantile(dat[,i],0.99) low&lt;-quantile(dat[,i],0.01) diff&lt;-up-low dat[,i]&lt;-(dat[,i]-low)/diff } return(dat) } In order to illustrate, let’s apply it to some variables from `demo_imp2: demo_imp3&lt;-qscale(subset(demo_imp2,select=c(&quot;income&quot;,&quot;store_exp&quot;,&quot;online_exp&quot;))) summary(demo_imp3) ## income store_exp online_exp ## Min. :-0.0578 Min. :-0.003 Min. :-0.0060 ## 1st Qu.: 0.1574 1st Qu.: 0.004 1st Qu.: 0.0427 ## Median : 0.1852 Median : 0.023 Median : 0.2537 ## Mean : 0.2601 Mean : 0.177 Mean : 0.2784 ## 3rd Qu.: 0.3046 3rd Qu.: 0.063 3rd Qu.: 0.3229 ## Max. : 1.2386 Max. : 7.477 Max. : 1.2988 After transformation, most of the variables are between 0-1. References "],
["resolve-skewness.html", "4.4 Resolve Skewness", " 4.4 Resolve Skewness Skewness is defined to be the third standardized central moment. The formula for the sample skewness statistics is: \\[ skewness=\\frac{\\sum(x_{i}-\\bar{x})^{3}}{(n-1)v^{3/2}}\\] \\[v=\\frac{\\sum(x_{i}-\\bar{x})^{2}}{(n-1)}\\] Skewness=0 means that the destribution is symmetric, i.e. the probability of falling on either side of the distribution’s mean is equal. # need skewness() function from e1071 package set.seed(1000) par(mfrow=c(1,2),oma=c(2,2,2,2)) # random sample 1000 chi-square distribution with df=2 # right skew x1&lt;-rchisq(1000,2, ncp = 0) # get left skew variable x2 from x1 x2&lt;-max(x1)-x1 plot(density(x2),main=paste(&quot;left skew, skewnwss =&quot;,round(skewness(x2),2)), xlab=&quot;X2&quot;) plot(density(x1),main=paste(&quot;right skew, skewness =&quot;,round(skewness(x1),2)), xlab=&quot;X1&quot;) FIGURE 4.1: Shewed Distribution You can easily tell if a distribution is skewed by simple visualization(Figure4.1). There are different ways may help to remove skewness such as log, square root or inverse. However it is often difficult to determine from plots which transformation is most appropriate for correcting skewness. The Box-Cox procedure automatically identified a transformation from the family of power transformations that are indexed by a parameter \\(\\lambda\\)(Box G 1964). \\[ x^{*}=\\begin{cases} \\begin{array}{c} \\frac{x^{\\lambda}-1}{\\lambda}\\\\ log(x) \\end{array} &amp; \\begin{array}{c} if\\ \\lambda\\neq0\\\\ if\\ \\lambda=0 \\end{array}\\end{cases} \\] It is easy to see that this family includes log transformation (\\(\\lambda=0\\)), square transformation (\\(\\lambda=2\\)), square root (\\(\\lambda=0.5\\)), inverse (\\(\\lambda=-1\\)) and others in-between. We can still use function preProcess() in package caret to apply this transformation by chaning the method argument. describe(sim.dat) ## vars n mean sd median ## age 1 999 38.58 14.19 36.0 ## gender* 2 1000 1.45 0.50 1.0 ## income 3 816 113543.07 49842.29 93868.7 ## house* 4 1000 1.57 0.50 2.0 ## store_exp 5 999 1358.71 2775.17 329.8 ## online_exp 6 1000 2120.18 1731.22 1941.9 ## store_trans 7 1000 5.35 3.70 4.0 ## online_trans 8 1000 13.55 7.96 14.0 ## Q1 9 1000 3.10 1.45 3.0 ## Q2 10 1000 1.82 1.17 1.0 ## Q3 11 1000 1.99 1.40 1.0 ## Q4 12 1000 2.76 1.16 3.0 ## Q5 13 1000 2.94 1.28 4.0 ## Q6 14 1000 2.45 1.44 2.0 ## Q7 15 1000 3.43 1.46 4.0 ## Q8 16 1000 2.40 1.15 2.0 ## Q9 17 1000 3.08 1.12 4.0 ## Q10 18 1000 2.32 1.14 2.0 ## segment* 19 1000 2.70 1.15 3.0 ## trimmed mad min max range ## age 37.67 16.31 16.00 69 53 ## gender* 1.43 0.00 1.00 2 1 ## income 104841.94 28989.47 41775.64 319704 277929 ## house* 1.58 0.00 1.00 2 1 ## store_exp 845.14 197.47 155.81 50000 49844 ## online_exp 1874.51 1015.21 68.82 9479 9411 ## store_trans 4.89 2.97 1.00 20 19 ## online_trans 13.42 10.38 1.00 36 35 ## Q1 3.13 1.48 1.00 5 4 ## Q2 1.65 0.00 1.00 5 4 ## Q3 1.75 0.00 1.00 5 4 ## Q4 2.83 1.48 1.00 5 4 ## Q5 3.05 0.00 1.00 5 4 ## Q6 2.43 1.48 1.00 5 4 ## Q7 3.54 0.00 1.00 5 4 ## Q8 2.36 1.48 1.00 5 4 ## Q9 3.23 0.00 1.00 5 4 ## Q10 2.27 1.48 1.00 5 4 ## segment* 2.75 1.48 1.00 4 3 ## skew kurtosis se ## age 0.47 -1.18 0.45 ## gender* 0.22 -1.95 0.02 ## income 1.69 2.57 1744.83 ## house* -0.27 -1.93 0.02 ## store_exp 8.08 115.04 87.80 ## online_exp 1.18 1.31 54.75 ## store_trans 1.11 0.69 0.12 ## online_trans 0.03 -0.98 0.25 ## Q1 -0.12 -1.36 0.05 ## Q2 1.13 -0.32 0.04 ## Q3 1.06 -0.40 0.04 ## Q4 -0.18 -1.46 0.04 ## Q5 -0.60 -1.40 0.04 ## Q6 0.11 -1.89 0.05 ## Q7 -0.90 -0.79 0.05 ## Q8 0.21 -1.33 0.04 ## Q9 -0.68 -1.10 0.04 ## Q10 0.39 -1.23 0.04 ## segment* -0.20 -1.41 0.04 It is easy to see the skewed variables. If mean and trimmed differ a lot, there is very likely outliers. By default, trimmed reports mean by dropping the top and bottom 10%. It can be adjusted by setting argument trim=. It is clear that store_exp has outliers. As an example, we will apply Box-Cox transformation on store_trans and online_trans: # select the two columns and save them as dat_bc dat_bc&lt;-subset(sim.dat,select=c(&quot;store_trans&quot;,&quot;online_trans&quot;)) (trans&lt;-preProcess(dat_bc,method=c(&quot;BoxCox&quot;))) ## Created from 1000 samples and 2 variables ## ## Pre-processing: ## - Box-Cox transformation (2) ## - ignored (0) ## ## Lambda estimates for Box-Cox transformation: ## 0.1, 0.7 The last line of the output shows the estimates of \\(\\lambda\\) for each variable. As before, use predict() to get the transformed result: transformed&lt;-predict(trans,dat_bc) par(mfrow=c(1,2),oma=c(2,2,2,2)) hist(dat_bc$store_trans,main=&quot;Before Transformation&quot;,xlab=&quot;store_trans&quot;) hist(transformed$store_trans,main=&quot;After Transformation&quot;,xlab=&quot;store_trans&quot;) FIGURE 4.2: Box-Cox Transformation Before the transformation, the stroe_trans is skewed right. The situation is significantly improved after (figure4.2). BoxCoxTrans () can also conduct Box-Cox transform. But note that BoxCoxTrans () can only be applied to a single variable, and it is not possible to transform difference columns in a data frame at the same time. (trans&lt;-BoxCoxTrans(dat_bc$store_trans)) ## Box-Cox Transformation ## ## 1000 data points used to estimate Lambda ## ## Input data summary: ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 3.00 4.00 5.35 7.00 20.00 ## ## Largest/Smallest: 20 ## Sample Skewness: 1.11 ## ## Estimated Lambda: 0.1 ## With fudge factor, Lambda = 0 will be used for transformations transformed&lt;-predict(trans,dat_bc$store_trans) skewness(transformed) ## [1] -0.2155 The estimate of \\(\\lambda\\) is the same as before (0.1). The skewness of the original observation is 1.1, and -0.2 after transformation. Although it is not strictly 0, it is greatly improved. References "],
["resolve-outliers.html", "4.5 Resolve Outliers", " 4.5 Resolve Outliers Even under certain assumptions we can statistically define outliers, it can be hard to define in some situations. Box plot, histogram and some other basic visualizations can be used to initially check whether there are outliers. For example, we can visualize numerical non-survey variables in sim.dat: # select numerical non-survey data sdat&lt;-subset(sim.dat,select=c(&quot;age&quot;,&quot;income&quot;,&quot;store_exp&quot;,&quot;online_exp&quot;,&quot;store_trans&quot;,&quot;online_trans&quot; )) # use scatterplotMatrix() function from car package par(oma=c(2,2,1,2)) scatterplotMatrix(sdat,diagonal=&quot;boxplot&quot;,smoother=FALSE) As figure ?? shows, store_exp has outliers. It is also easy to observe the pair relationship from the plot. age is negatively correlated with online_trans but positively correlated with store_trans. It seems that older people tend to purchase from the local store. The amount of expense is positively correlated with income. Scatterplot matrix like this can reveal lots of information before modeling. In addition to visualization, there are some statistical methods to define outliers, such as the commonly used Z-score. The Z-score for variable \\(\\mathbf{Y}\\) is defined as: \\[Z_{i}=\\frac{Y_{i}-\\bar{Y}}{s}\\] where \\(\\bar{Y}\\) and \\(s\\) are mean and standard deviation for \\(Y\\). Z-score is a measurement of the distance between each observation and the mean. This method may be misleading, especially when the sample size is small. Iglewicz and Hoaglin proposed to use the modified Z-score to determine the outlier(Iglewicz and Hoaglin 1993)： \\[M_{i}=\\frac{0.6745(Y_{i}-\\bar{Y})}{MAD}\\] Where MAD is the median of a series of $| Y_ {i} - {Y} | $, called the median of the absolute dispersion. Iglewicz and Hoaglin suggest that the points with the Z-score greater than 3.5 corrected above are possible outliers. Let’s apply it to income: # calculate median of the absolute dispersion for income ymad&lt;-mad(na.omit(sdat$income)) # calculate z-score zs&lt;-(sdat$income-mean(na.omit(sdat$income)))/ymad # count the number of outliers sum(na.omit(zs&gt;3.5)) ## [1] 59 According to modified Z-score, variable income has 59 outliers. Refer to (Iglewicz and Hoaglin 1993) for other ways of detecting outliers. The impact of outliers depends on the model. Some models are sensitive to outliers, such as linear regression, logistic regression. Some are pretty robust to outliers, such as tree models, support vector machine. Also, the outlier is not wrong data. It is real observation so can not be deleted at will. If a model is sensitive to outliers, we can use spatial sign transformation (Serneels S 2006) to minimize the problem. It projects the original sample points to the surface of a sphere by: \\[x_{ij}^{*}=\\frac{x_{ij}}{\\sqrt{\\sum_{j=1}^{p}x_{ij}^{2}}}\\] where \\(x_{ij}\\) represents the \\(i^{th}\\) observation and \\(j^{th}\\) variable. As shown in the equation, every observation for sample \\(i\\) is divided by its square mode. The denominator is the Euclidean distance to the center of the p-dimensional predictor space. Three things to pay attention here: It is important to center and scale the predictor data before using this transformation Unlike centering or scaling, this manipulation of the predictors transforms them as a group If there are some variables to remove (for example, highly correlated variables), do it before the transformation Function spatialSign() caret package can conduct the transformation. Take income and age as an example: # KNN imputation sdat&lt;-sim.dat[,c(&quot;income&quot;,&quot;age&quot;)] imp&lt;-preProcess(sdat,method=c(&quot;knnImpute&quot;),k=5) sdat&lt;-predict(imp,sdat) transformed &lt;- spatialSign(sdat) transformed &lt;- as.data.frame(transformed) par(mfrow=c(1,2),oma=c(2,2,2,2)) plot(income ~ age,data = sdat,col=&quot;blue&quot;,main=&quot;Before&quot;) plot(income ~ age,data = transformed,col=&quot;blue&quot;,main=&quot;After&quot;) FIGURE 4.3: spatial sign transformation Some readers may have found that the above code does not seem to standardize the data before transformation. Recall the introduction of KNN, preProcess () with method=&quot;knnImpute&quot; by default will standardize data. References "],
["collinearity.html", "4.6 Collinearity", " 4.6 Collinearity It is probably a technical term that many un-technical people also know. When two predictors are very strongly correlated, including both in a model may lead to confusion or problem with a singular matrix. There is an excellent function in corrplot package with the same name corrplot() that can visualize correlation structure of a set of predictors. The function has the option to reorder the variables in a way that reveals clusters of highly correlated ones. # select non-survey numerical variables sdat&lt;-subset(sim.dat,select=c(&quot;age&quot;,&quot;income&quot;,&quot;store_exp&quot;,&quot;online_exp&quot;,&quot;store_trans&quot;,&quot;online_trans&quot; )) # use bagging imputation here imp&lt;-preProcess(sdat,method=&quot;bagImpute&quot;) sdat&lt;-predict(imp,sdat) # get the correlation matrix correlation&lt;-cor(sdat) # plot par(oma=c(2,2,2,2)) corrplot.mixed(correlation,order=&quot;hclust&quot;,tl.pos=&quot;lt&quot;,upper=&quot;ellipse&quot;) Here use corrplot.mixed() function to visualize the correlation matrix (figure ??). The closer the correlation is to 0, the lighter the color is and the closer the shape is to a circle. The elliptical means the correlation is not equal to 0 (because we set the upper = &quot;ellipse&quot;), the greater the correlation, the narrower the ellipse. Blue represents a positive correlation, red represents a negative correlation. The direction of the ellipse also changes with the correlation. The correlation coefficient is shown in the lower triangle of the matrix. The variables relationship from previous scatter matrix (figure @ref(fig: scm)) are clear here: the negative correlation between age and online shopping, the positive correlation between income and amount of purchasing. Some correlation is very strong ( such as the correlation between online_trans andage is -0.85) which means the two variables contain duplicate information . Section 3.5 of “Applied Predictive Modeling” (Max Kuhn 2013) presents a heuristic algorithm to remove a minimum number of predictors to ensure all pairwise correlations are below a certain threshold: Calculate the correlation matrix of the predictors. Determine the two predictors associated with the largest absolute pairwise correlation (call them predictors A and B). Determine the average correlation between A and the other variables. Do the same for predictor B. If A has a larger average correlation, remove it; otherwise, remove predictor B. Repeat Step 2-4 until no absolute correlations are above the threshold. The findCorrelation() function in package caret will apply the above algorithm. (highCorr&lt;-findCorrelation(cor(sdat),cutoff=.75)) ## [1] 1 It returns the index of columns need to be deleted. It tells us that we need to remove the first column to make sure the correlations are all below 0.75. # delete highly correlated columns sdat&lt;-sdat[-highCorr] # check the new correlation matrix cor(sdat) ## income store_exp online_exp store_trans ## income 1.0000 0.6004 0.5199 0.7070 ## store_exp 0.6004 1.0000 0.5350 0.5399 ## online_exp 0.5199 0.5350 1.0000 0.4421 ## store_trans 0.7070 0.5399 0.4421 1.0000 ## online_trans -0.3573 -0.1367 0.2256 -0.4368 ## online_trans ## income -0.3573 ## store_exp -0.1367 ## online_exp 0.2256 ## store_trans -0.4368 ## online_trans 1.0000 The absolute value of the elements in the correlation matrix after removal are all below 0.75. How strong does a correlation have to get, before you should start worrying about multicollinearity? There is no easy answer to that question. You can treat the threshold as a tuning parameter and pick one that gives you best prediction accuracy. References "],
["sparse-variables.html", "4.7 Sparse Variables", " 4.7 Sparse Variables Other than the highly related predictors, predictors with degenerate distributions can cause the problem too. Removing those variables can significantly improve some models’ performance and stability (such as linear regression and logistic regression but the tree based model is impervious to this type of predictors). One extreme example is a variable with a single value which is called zero-variance variable. Variables with very low frequency of unique values are near-zero variance predictors. In general, detecting those variables follows two rules: The fraction of unique values over the sample size The ratio of the frequency of the most prevalent value to the frequency of the second most prevalent value. nearZeroVar() function in the caret package can filter near-zero variance predictors according to the above rules. In order to show the useage of the function, let’s arbitaryly add some problematic variables to the origional data sim.dat: # make a copy zero_demo&lt;-sim.dat # add two sparse variable # zero1 only has one unique value # zero2 is a vector with the first element 1 and the rest are 0s zero_demo$zero1&lt;-rep(1,nrow(zero_demo)) zero_demo$zero2&lt;-c(1,rep(0,nrow(zero_demo)-1)) The function will return a vector of integers indicating which columns to remove: nearZeroVar(zero_demo,freqCut = 95/5, uniqueCut = 10) As expected, it returns the two columns we generated. You can go ahead to remove them. Note the two arguments in the function freqCut = and uniqueCut = are corresponding to the previous two rules. freqCut: the cutoff for the ratio of the most common value to the second most common value uniqueCut: the cutoff for the percentage of distinct values out of the number of total samples "],
["re-encode-dummy-variables.html", "4.8 Re-encode Dummy Variables", " 4.8 Re-encode Dummy Variables A dummy variable is a binary variable (0/1) to represent subgroups of the sample. Sometimes we need to recode categories to smaller bits of information named “dummy variables”. For example, some questionnaires have five options for each question, A, B, C, D, and E. After you get the data, you will usually convert the corresponding categorical variables for each question into five nominal variables, and then use one of the options as the baseline. Let’s encode gender and house from sim.dat to dummy variables. There are two ways to implement this. The first is to use class.ind() from nnet package. However, it only works on one variable at a time. dumVar&lt;-class.ind(sim.dat$gender) head(dumVar) ## Female Male ## [1,] 1 0 ## [2,] 1 0 ## [3,] 0 1 ## [4,] 0 1 ## [5,] 0 1 ## [6,] 0 1 Since it is redundant to keep both, we need to remove one of them when modeling. Another more powerful function is dummyVars() from caret: dumMod&lt;-dummyVars(~gender+house+income, data=sim.dat, # use &quot;origional variable name + level&quot; as new name levelsOnly=F) head(predict(dumMod,sim.dat)) ## gender.Female gender.Male house.No house.Yes income ## 1 1 0 0 1 120963 ## 2 1 0 0 1 122008 ## 3 0 1 0 1 114202 ## 4 0 1 0 1 113616 ## 5 0 1 0 1 124253 ## 6 0 1 0 1 107661 dummyVars() can also use formula format. The variable on the right-hand side can be both categorical and numeric. For numerical variable, the function will keep the variable unchanged. The advantage is that you can apply the function to a data frame without removing numerical variables. Other than that, the function can create interaction term: dumMod&lt;-dummyVars(~gender+house+income+income:gender, data=sim.dat, levelsOnly=F) head(predict(dumMod,sim.dat)) ## gender.Female gender.Male house.No house.Yes income ## 1 1 0 0 1 120963 ## 2 1 0 0 1 122008 ## 3 0 1 0 1 114202 ## 4 0 1 0 1 113616 ## 5 0 1 0 1 124253 ## 6 0 1 0 1 107661 ## gender.Female:income gender.Male:income ## 1 120963 0 ## 2 122008 0 ## 3 0 114202 ## 4 0 113616 ## 5 0 124253 ## 6 0 107661 If you think the impact income levels on purchasing behavior is different for male and female, then you may add the interaction term between income and gender. You can do this by adding income: gender in the formula. -->"],
["data-wrangling.html", "Chapter 5 Data Wrangling", " Chapter 5 Data Wrangling This chapter focuses on some of the most frequently used data manipulations and shows how to implement them in R. It is important to explore the data set with descriptive statistics (mean, standard deviation, etc.) and data visualization before analysis. Transform data so that the data structure is in line with the requirements of the model. You also need to summarize the results after analysis. Here we assume the readers are already familiar with some of the traditional R data operations, such as subsetting data frame, deleting variables, read and write functions (read.csv (), write.csv (), etc.) in base R. We will also skip some basic descriptive functions in R. For example, for discrete variables, we often use the frequency table to look at the frequency (table ()) of the variable at various levels as needed, or a crosstab of two variables. You can also draw a bar chart for discrete variables (bar()). For continuous variables, we need to look at the mean (mean ()), standard deviation (sd()), quantile (quantile()) of a variable from time to time. There are also functions like summary(), str() and describe() (a functions in the ‘psych’ package) that give a summary of a data frame. The focus here is to introduce some of the more efficient data wrangling methods in R. "],
["read-and-write-data.html", "5.1 Read and write data", " 5.1 Read and write data 5.1.1 readr You must be familiar with read.csv(), read.table() and write.csv() in base R. Here we will introduce a more efficient package from RStudio in 2015 for reading and writing data: readr package. The corresponding functions are read_csv(), read_table() and write_csv(). The commands look quite similar, but readr is different in the following respects: It is 10x faster. The trick is that readr uses C++ to process the data quickly. It doesn’t change the column names. The names can start with a number and “.” will not be substituted to “_”. For example: library(readr) read_csv(&quot;2015,2016,2017 1,2,3 4,5,6&quot;) ## # A tibble: 2 x 3 ## `2015` `2016` `2017` ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1 2 3 ## 2 4 5 6 readr functions do not convert strings to factors by default, are able to parse dates and times and can automatically determine the data types in each column. The killing character, in my opinion, is that readr provides progress bar. What makes you feel worse than waiting is not knowing how long you have to wait. Without “progress bar” might be the No.1 reason that people break up with the one they have been dating. The major functions of readr is to turn flat files into data frames: read_csv(): reads comma delimited files read_csv2(): reads semicolon separated files (common in countries where , is used as the decimal place) read_tsv(): reads tab delimited files read_delim(): reads in files with any delimiter read_fwf(): reads fixed width files. You can specify fields either by their widths with fwf_widths() or their position with fwf_positions() read_table(): reads a common variation of fixed width files where columns are separated by white space read_log(): reads Apache style log files The good thing is that those functions have similar syntax. Once you learn one, the others become easy. Here we will focus on read_csv(). The most important information for read_csv() is the path to your data: library(readr) sim.dat &lt;- read_csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv &quot;) head(sim.dat) ## # A tibble: 6 x 19 ## age gender income house store_exp online_exp ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 57 Female 120963 Yes 529.1 303.5 ## 2 63 Female 122008 Yes 478.0 109.5 ## 3 59 Male 114202 Yes 490.8 279.2 ## 4 60 Male 113616 Yes 347.8 141.7 ## 5 51 Male 124253 Yes 379.6 112.2 ## 6 59 Male 107661 Yes 338.3 195.7 ## # ... with 13 more variables: store_trans &lt;int&gt;, ## # online_trans &lt;int&gt;, Q1 &lt;int&gt;, Q2 &lt;int&gt;, Q3 &lt;int&gt;, ## # Q4 &lt;int&gt;, Q5 &lt;int&gt;, Q6 &lt;int&gt;, Q7 &lt;int&gt;, Q8 &lt;int&gt;, ## # Q9 &lt;int&gt;, Q10 &lt;int&gt;, segment &lt;chr&gt; The function reads the file to R as a tibble. You can consider tibble as next iteration of the data frame. They are different with data frame for the following aspects: It never changes an input’s type (i.e., no more stringsAsFactors = FALSE!) It never adjusts the names of variables It has a refined print method that shows only the first 10 rows and all the columns that fit on the screen. You can also control the default print behavior by setting options. Refer to http://r4ds.had.co.nz/tibbles.html for more information about ‘tibble’. When you run read_csv() it prints out a column specification that gives the name and type of each column. To better understanding how readr works, it is helpful to type in some baby data set and check the results: dat=read_csv(&quot;2015,2016,2017 100,200,300 canola,soybean,corn&quot;) print(dat) ## # A tibble: 2 x 3 ## `2015` `2016` `2017` ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 100 200 300 ## 2 canola soybean corn You can also add comments on the top and tell R to skip those lines: dat=read_csv(&quot;# I will never let you know that # my favorite food is carrot Date,Food,Mood Monday,carrot,happy Tuesday,carrot,happy Wednesday,carrot,happy Thursday,carrot,happy Friday,carrot,happy Saturday,carrot,extremely happy Sunday,carrot,extremely happy&quot;, skip = 2) print(dat) ## # A tibble: 7 x 3 ## Date Food Mood ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Monday carrot happy ## 2 Tuesday carrot happy ## 3 Wednesday carrot happy ## 4 Thursday carrot happy ## 5 Friday carrot happy ## 6 Saturday carrot extremely happy ## 7 Sunday carrot extremely happy If you don’t have column names, set col_names = FALSE then R will assign names “X1”,“X2”… to the columns: dat=read_csv(&quot;Saturday,carrot,extremely happy Sunday,carrot,extremely happy&quot;, col_names=FALSE) print(dat) ## # A tibble: 2 x 3 ## X1 X2 X3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Saturday carrot extremely happy ## 2 Sunday carrot extremely happy You can also pass col_names a character vector which will be used as the column names. Try to replace col_names=FALSE with col_names=c(&quot;Date&quot;,&quot;Food&quot;,&quot;Mood&quot;) and see what happen. As mentioned before, you can use read_csv2() to read semicolon separated files: dat=read_csv2(&quot;Saturday; carrot; extremely happy \\n Sunday; carrot; extremely happy&quot;, col_names=FALSE) print(dat) ## # A tibble: 2 x 3 ## X1 X2 X3 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Saturday carrot extremely happy ## 2 Sunday carrot extremely happy Here “\\n” is a convenient shortcut for adding a new line. You can use read_tsv() to read tab delimited files： dat=read_tsv(&quot;every\\tman\\tis\\ta\\tpoet\\twhen\\the\\tis\\tin\\tlove\\n&quot;, col_names = FALSE) print(dat) ## # A tibble: 1 x 10 ## X1 X2 X3 X4 X5 X6 X7 X8 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 every man is a poet when he is ## # ... with 2 more variables: X9 &lt;chr&gt;, X10 &lt;chr&gt; Or more generally, you can use read_delim() and assign separating character： dat=read_delim(&quot;THE|UNBEARABLE|RANDOMNESS|OF|LIFE\\n&quot;, delim = &quot;|&quot;, col_names = FALSE) print(dat) ## # A tibble: 1 x 5 ## X1 X2 X3 X4 X5 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 THE UNBEARABLE RANDOMNESS OF LIFE Another situation you will often run into is the missing value. In marketing survey, people like to use “99” to represent missing. You can tell R to set all observation with value “99” as missing when you read the data: dat=read_csv(&quot;Q1,Q2,Q3 5, 4,99&quot;,na=&quot;99&quot;) print(dat) ## # A tibble: 1 x 3 ## Q1 Q2 Q3 ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 5 4 &lt;NA&gt; For writing data back to disk, you can use write_csv() and write_tsv(). The following two characters of the two functions increase the chances of the output file being read back in correctly: Encode strings in UTF-8 Save dates and date-times in ISO8601 format so they are easily parsed elsewhere For example: write_csv(sim.dat, &quot;sim_dat.csv&quot;) For other data types, you can use the following packages: Haven: SPSS, Stata and SAS data Readxl and xlsx: excel data(.xls and .xlsx) DBI: given data base, such as RMySQL, RSQLite and RPostgreSQL, read data directly from the database using SQL Some other useful materials: For getting data from the internet, you can refer to the book “XML and Web Technologies for Data Sciences with R”. R data import/export manual rio package：https://github.com/leeper/rio 5.1.2 data.table— enhanced data.frame What is data.table? It is an R package that provides an enhanced version of data.frame. The most used object in R is data frame. Before we move on, let’s briefly review some basic characters and manipulations of data.frame: It is a set of rows and columns. Each row is of the same length and data type Every column is of the same length but can be of differing data types It has characteristics of both a matrix and a list It uses [] to subset data We will use the clothes customer data to illustrate. There are two dimensions in []. The first one indicates the row and second one indicates column. It uses a comma to separate them. # read data sim.dat&lt;-readr::read_csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv&quot;) # subset the first two rows sim.dat[1:2,] ## # A tibble: 2 x 19 ## age gender income house store_exp online_exp ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 57 Female 120963 Yes 529.1 303.5 ## 2 63 Female 122008 Yes 478.0 109.5 ## # ... with 13 more variables: store_trans &lt;int&gt;, ## # online_trans &lt;int&gt;, Q1 &lt;int&gt;, Q2 &lt;int&gt;, Q3 &lt;int&gt;, ## # Q4 &lt;int&gt;, Q5 &lt;int&gt;, Q6 &lt;int&gt;, Q7 &lt;int&gt;, Q8 &lt;int&gt;, ## # Q9 &lt;int&gt;, Q10 &lt;int&gt;, segment &lt;chr&gt; # subset the first two rows and column 3 and 5 sim.dat[1:2,c(3,5)] ## # A tibble: 2 x 2 ## income store_exp ## &lt;dbl&gt; &lt;dbl&gt; ## 1 120963 529.1 ## 2 122008 478.0 # get all rows with age&gt;70 sim.dat[sim.dat$age&gt;70,] ## # A tibble: 1 x 19 ## age gender income house store_exp online_exp ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 300 Male 208017 Yes 5077 6053 ## # ... with 13 more variables: store_trans &lt;int&gt;, ## # online_trans &lt;int&gt;, Q1 &lt;int&gt;, Q2 &lt;int&gt;, Q3 &lt;int&gt;, ## # Q4 &lt;int&gt;, Q5 &lt;int&gt;, Q6 &lt;int&gt;, Q7 &lt;int&gt;, Q8 &lt;int&gt;, ## # Q9 &lt;int&gt;, Q10 &lt;int&gt;, segment &lt;chr&gt; # get rows with age&gt; 60 and gender is Male # select column 3 and 4 sim.dat[sim.dat$age&gt;68 &amp; sim.dat$gender == &quot;Male&quot;, 3:4] ## # A tibble: 2 x 2 ## income house ## &lt;dbl&gt; &lt;chr&gt; ## 1 119552 No ## 2 208017 Yes Remember that there are usually different ways to conduct the same manipulation. For example, the following code presents three ways to calculate an average number of online transactions for male and female: tapply(sim.dat$online_trans, sim.dat$gender, mean ) ## Female Male ## 15.38 11.26 aggregate(online_trans ~ gender, data = sim.dat, mean) ## gender online_trans ## 1 Female 15.38 ## 2 Male 11.26 library(dplyr) sim.dat%&gt;% group_by(gender)%&gt;% summarise(Avg_online_trans=mean(online_trans)) ## # A tibble: 2 x 2 ## gender Avg_online_trans ## &lt;chr&gt; &lt;dbl&gt; ## 1 Female 15.38 ## 2 Male 11.26 There is no gold standard to choose a specific function to manipulate data. The goal is to solve the real problem, not the tool itself. So just use whatever tool that is convenient for you. The way to use [] is straightforward. But the manipulations are limited. If you need more complicated data reshaping or aggregation, there are other packages to use such as dplyr, reshape2, tidyr etc. But the usage of those packages are not as straightforward as []. You often need to change functions. Keeping related operations together, such as subset, group, update, join etc, will allow for: concise, consistent and readable syntax irrespective of the set of operations you would like to perform to achieve your end goal performing data manipulation fluidly without the cognitive burden of having to change among different functions by knowing precisely the data required for each operation, you can automatically optimize operations effectively data.table is the package for that. If you are not familiar with other data manipulating packages and are interested in reducing programming time tremendously, then this package is for you. Other than extending the function of [], data.table has the following advantages: Offers fast import, subset, grouping, update, and joins for large data files It is easy to turn data frame to data table Can behave just like a data frame You need to install and load the package: # If you haven&#39;t install it, use the code to instal # install.packages(&quot;data.table&quot;) # load packagw library(data.table) Use data.table() to covert the existing data frame sim.dat to data table: dt &lt;- data.table(sim.dat) class(dt) ## [1] &quot;data.table&quot; &quot;data.frame&quot; Calculate mean for counts of online transactions: dt[, mean(online_trans)] ## [1] 13.55 You can’t do the same thing using data frame: sim.dat[,mean(online_trans)] Error in mean(online_trans) : object &#39;online_trans&#39; not found If you want to calculate mean by group as before, set “by =” argument: dt[ , mean(online_trans), by = gender] ## gender V1 ## 1: Female 15.38 ## 2: Male 11.26 You can group by more than one variables. For example, group by “gender” and “house”: dt[ , mean(online_trans), by = .(gender, house)] ## gender house V1 ## 1: Female Yes 11.312 ## 2: Male Yes 8.772 ## 3: Female No 19.146 ## 4: Male No 16.486 Assign column names for aggregated variables: dt[ , .(avg = mean(online_trans)), by = .(gender, house)] ## gender house avg ## 1: Female Yes 11.312 ## 2: Male Yes 8.772 ## 3: Female No 19.146 ## 4: Male No 16.486 data.table can accomplish all operations that aggregate() and tapply()can do for data frame. General setting of data.table Different from data frame, there are three arguments for data table: It is analogous to SQL. You don’t have to know SQL to learn data table. But experience with SQL will help you understand data table. In SQL, you select column j (use command SELECT) for row i (using command WHERE). GROUP BY in SQL will assign the variable to group the observations. Let’s review our previous code: dt[ , mean(online_trans), by = gender] ## gender V1 ## 1: Female 15.38 ## 2: Male 11.26 The code above is equal to the following SQL： SELECT gender, avg(online_trans) FROM sim.dat GROUP BY gender R code: dt[ , .(avg = mean(online_trans)), by = .(gender, house)] ## gender house avg ## 1: Female Yes 11.312 ## 2: Male Yes 8.772 ## 3: Female No 19.146 ## 4: Male No 16.486 is equal to SQL： SELECT gender, house, avg(online_trans) AS avg FROM sim.dat GROUP BY gender, house R code： dt[ age &lt; 40, .(avg = mean(online_trans)), by = .(gender, house)] ## gender house avg ## 1: Male Yes 14.46 ## 2: Female Yes 18.14 ## 3: Male No 18.24 ## 4: Female No 20.10 is equal to SQL： SELECT gender, house, avg(online_trans) AS avg FROM sim.dat WHERE age &lt; 40 GROUP BY gender, house You can see the analogy between data.table and SQL. Now let’s focus on operations in data table. select row # select rows with age&lt;20 and income &gt; 80000 dt[age &lt; 20 &amp; income &gt; 80000] ## age gender income house store_exp online_exp ## 1: 19 Female 83535 No 227.7 1491 ## 2: 18 Female 89416 Yes 209.5 1926 ## 3: 19 Female 92813 No 186.7 1042 ## store_trans online_trans Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 ## 1: 1 22 2 1 1 2 4 1 4 2 4 ## 2: 3 28 2 1 1 1 4 1 4 2 4 ## 3: 2 18 3 1 1 2 4 1 4 3 4 ## Q10 segment ## 1: 1 Style ## 2: 1 Style ## 3: 1 Style # select the first two rows dt[1:2] ## age gender income house store_exp online_exp ## 1: 57 Female 120963 Yes 529.1 303.5 ## 2: 63 Female 122008 Yes 478.0 109.5 ## store_trans online_trans Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 ## 1: 2 2 4 2 1 2 1 4 1 4 2 ## 2: 4 2 4 1 1 2 1 4 1 4 1 ## Q10 segment ## 1: 4 Price ## 2: 4 Price select column Selecting columns in data.table don’t need $: # select column “age” but return it as a vector # the argument for row is empty so the result will return all observations ans &lt;- dt[, age] head(ans) ## [1] 57 63 59 60 51 59 To return data.table object, put column names in list(): # Select age and online_exp columns and return as a data.table instead ans &lt;- dt[, list(age, online_exp)] head(ans) ## age online_exp ## 1: 57 303.5 ## 2: 63 109.5 ## 3: 59 279.2 ## 4: 60 141.7 ## 5: 51 112.2 ## 6: 59 195.7 Or you can also put column names in .(): ans &lt;- dt[, .(age, online_exp)] # head(ans) To select all columns from “age” to “income”: ans &lt;- dt[, age:income, with = FALSE] head(ans,2) ## age gender income ## 1: 57 Female 120963 ## 2: 63 Female 122008 Delete columns using - or !: # delete columns from age to online_exp ans &lt;- dt[, -(age:online_exp), with = FALSE] ans &lt;- dt[, !(age:online_exp), with = FALSE] tabulation In data table. .N means to count。 # row count dt[, .N] ## [1] 1000 If you assign the group variable, then it will count by groups: # counts by gender dt[, .N, by= gender] ## gender N ## 1: Female 554 ## 2: Male 446 # for those younger than 30, count by gender dt[age &lt; 30, .(count=.N), by= gender] ## gender count ## 1: Female 292 ## 2: Male 86 Order table: # get records with the highest 5 online expense: head(dt[order(-online_exp)],5) ## age gender income house store_exp online_exp ## 1: 40 Female 217600 No 7024 9479 ## 2: 41 Female NA Yes 3787 8638 ## 3: 36 Male 228550 Yes 3280 8221 ## 4: 31 Female 159508 Yes 5177 8006 ## 5: 43 Female 190407 Yes 4695 7876 ## store_trans online_trans Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 ## 1: 10 6 1 4 5 4 3 4 4 1 4 ## 2: 14 10 1 4 4 4 4 4 4 1 4 ## 3: 8 12 1 4 5 4 4 4 4 1 4 ## 4: 11 13 1 4 4 4 4 4 4 1 4 ## 5: 6 11 1 4 5 4 4 4 4 1 4 ## Q10 segment ## 1: 2 Conspicuous ## 2: 2 Conspicuous ## 3: 1 Conspicuous ## 4: 2 Conspicuous ## 5: 2 Conspicuous Since data table keep some characters of data frame, they share some operations: dt[order(-online_exp)][1:5] ## age gender income house store_exp online_exp ## 1: 40 Female 217600 No 7024 9479 ## 2: 41 Female NA Yes 3787 8638 ## 3: 36 Male 228550 Yes 3280 8221 ## 4: 31 Female 159508 Yes 5177 8006 ## 5: 43 Female 190407 Yes 4695 7876 ## store_trans online_trans Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 ## 1: 10 6 1 4 5 4 3 4 4 1 4 ## 2: 14 10 1 4 4 4 4 4 4 1 4 ## 3: 8 12 1 4 5 4 4 4 4 1 4 ## 4: 11 13 1 4 4 4 4 4 4 1 4 ## 5: 6 11 1 4 5 4 4 4 4 1 4 ## Q10 segment ## 1: 2 Conspicuous ## 2: 2 Conspicuous ## 3: 1 Conspicuous ## 4: 2 Conspicuous ## 5: 2 Conspicuous You can also order the table by more than one variable. The following code will order the table by gender, then order within gender by online_exp: dt[order(gender, -online_exp)][1:5] ## age gender income house store_exp online_exp ## 1: 40 Female 217600 No 7024 9479 ## 2: 41 Female NA Yes 3787 8638 ## 3: 31 Female 159508 Yes 5177 8006 ## 4: 43 Female 190407 Yes 4695 7876 ## 5: 50 Female 263858 Yes 5814 7449 ## store_trans online_trans Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 ## 1: 10 6 1 4 5 4 3 4 4 1 4 ## 2: 14 10 1 4 4 4 4 4 4 1 4 ## 3: 11 13 1 4 4 4 4 4 4 1 4 ## 4: 6 11 1 4 5 4 4 4 4 1 4 ## 5: 11 11 1 4 5 4 4 4 4 1 4 ## Q10 segment ## 1: 2 Conspicuous ## 2: 2 Conspicuous ## 3: 2 Conspicuous ## 4: 2 Conspicuous ## 5: 1 Conspicuous Use fread() to import dat Other than read.csv in base R, we have introduced ‘read_csv’ in ‘readr’. read_csv is much faster and will provide progress bar which makes user feel much better (at least make me feel better). fread() in data.table further increase the efficiency of reading data. The following are three examples of reading the same data file topic.csv. The file includes text data scraped from an agriculture forum with 209670 rows and 6 columns: system.time(topic&lt;-read.csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/topic.csv&quot;)) user system elapsed 4.313 0.027 4.340 system.time(topic&lt;-readr::read_csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/topic.csv&quot;)) user system elapsed 0.267 0.008 0.274 system.time(topic&lt;-data.table::fread(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/topic.csv&quot;)) user system elapsed 0.217 0.005 0.221 It is clear that read_csv() is much faster than read.csv(). fread() is a little faster than read_csv(). As the size increasing, the difference will become for significant. Note that fread() will read file as data.table by default. "],
["summarize-data.html", "5.2 Summarize data", " 5.2 Summarize data 5.2.1 apply(), lapply() and sapply() in base R There are some powerful functions to summarize data in base R, such as apply(), lapply() and sapply(). They do the same basic things and are all from “apply” family: apply functions over parts of data. They differ in two important respects: the type of object they apply to the type of result they will return When do we use apply()? When we want to apply a function to margins of an array or matrix. That means our data need to be structured. The operations can be very flexible. It returns a vector or array or list of values obtained by applying a function to margins of an array or matrix. For example you can compute row and column sums for a matrix: ## simulate a matrix x &lt;- cbind(x1 =1:8, x2 = c(4:1, 2:5)) dimnames(x)[[1]] &lt;- letters[1:8] apply(x, 2, mean) ## x1 x2 ## 4.5 3.0 col.sums &lt;- apply(x, 2, sum) row.sums &lt;- apply(x, 1, sum) You can also apply other functions: ma &lt;- matrix(c(1:4, 1, 6:8), nrow = 2) ma ## [,1] [,2] [,3] [,4] ## [1,] 1 3 1 7 ## [2,] 2 4 6 8 apply(ma, 1, table) #--&gt; a list of length 2 ## [[1]] ## ## 1 3 7 ## 2 1 1 ## ## [[2]] ## ## 2 4 6 8 ## 1 1 1 1 apply(ma, 1, stats::quantile) # 5 x n matrix with rownames ## [,1] [,2] ## 0% 1 2.0 ## 25% 1 3.5 ## 50% 2 5.0 ## 75% 4 6.5 ## 100% 7 8.0 Results can have different lengths for each call. This is a trickier example. What will you get? ## Example with different lengths for each call z &lt;- array(1:24, dim = 2:4) zseq &lt;- apply(z, 1:2, function(x) seq_len(max(x))) zseq ## a 2 x 3 matrix typeof(zseq) ## list dim(zseq) ## 2 3 zseq[1,] apply(z, 3, function(x) seq_len(max(x))) lapply() applies a function over a list, data.frame or vector and returns a list of the same length. sapply() is a user-friendly version and wrapper of lapply(). By default it returns a vector, matrix or if simplify = &quot;array&quot;, an array if appropriate. apply(x, f, simplify = FALSE, USE.NAMES = FALSE) is the same as lapply(x, f). If simplify=TRUE, then it will return a data.frame instead of list. Let’s use some data with context to help you better understand the functions. Get the mean and standard deviation of all numerical variables in the data set. # Read data sim.dat&lt;-read.csv(&quot;https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv&quot;) # Get numerical variables sdat&lt;-sim.dat[,!lapply(sim.dat,class)==&quot;factor&quot;] ## Try the following code with apply() function ## apply(sim.dat,2,class) ## What is the problem? The data frame sdat only includes numeric columns. Now we can go head and use apply() to get mean and standard deviation for each column: apply(sdat, MARGIN=2,function(x) mean(na.omit(x))) ## age income store_exp online_exp ## 3.884e+01 1.135e+05 1.357e+03 2.120e+03 ## store_trans online_trans Q1 Q2 ## 5.350e+00 1.355e+01 3.101e+00 1.823e+00 ## Q3 Q4 Q5 Q6 ## 1.992e+00 2.763e+00 2.945e+00 2.448e+00 ## Q7 Q8 Q9 Q10 ## 3.434e+00 2.396e+00 3.085e+00 2.320e+00 Here we defined a function using function(x) mean(na.omit(x)). It is a very simple function. It tells R to ignore the missing value when calculating the mean. MARGIN=2 tells R to apply function to each column. It is not hard to guess what MARGIN=1 mean. The result show that the average online expense is much higher than store expense. You can also compare the average scores across different questions. The command to calculate standard deviation is very similar. The only difference is to change mean() to sd(): apply(sdat, MARGIN=2,function(x) sd(na.omit(x))) ## age income store_exp online_exp ## 16.417 49842.287 2774.400 1731.224 ## store_trans online_trans Q1 Q2 ## 3.696 7.957 1.450 1.168 ## Q3 Q4 Q5 Q6 ## 1.402 1.155 1.284 1.439 ## Q7 Q8 Q9 Q10 ## 1.456 1.154 1.118 1.136 Even the average online expense is higher than store expense, the standard deviation for store expense is much higher than online expense which indicates there are very likely some big/small purchase in store. We can check it quickly: summary(sdat$store_exp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -500 205 329 1360 597 50000 summary(sdat$online_exp) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 69 420 1940 2120 2440 9480 There are some odd values in store expense. The minimum value is -500 which is a wrong imputation which indicates that you should preprocess data before analyzing it. Checking those simple statistics will help you better understand your data. It then gives you some idea how to preprocess and analyze them. How about using lapply() and sapply()? Run the following code and compare the results: lapply(sdat, function(x) sd(na.omit(x))) sapply(sdat, function(x) sd(na.omit(x))) sapply(sdat, function(x) sd(na.omit(x)), simplify = FALSE) 5.2.2 ddply() in plyr package dplyr is a set of clean and consistent tools that implement the split-apply-combine pattern in R. This is an extremely common pattern in data analysis: you solve a complex problem by breaking it down into small pieces, doing something to each piece and then combining the results back together again. [From package description] You may find the description sounds familiar. The package is sort of a wrapper of apply family. We will only introduce the main function ddply(). Because the package has next iteration which is dplyr package. We will introduce dplyr in more details. The reason we still want to spend some time on the older version is that they have the similar idea and knowing the lineage will deeper your understanding of the whole family. We will use the same data frame sim.dat to illustrate. Run the following command: library(plyr) ddply(sim.dat,&quot;segment&quot;,summarize, Age=round(mean(na.omit(age)),0), FemalePct=round(mean(gender==&quot;Female&quot;),2), HouseYes=round(mean(house==&quot;Yes&quot;),2), store_exp=round(mean(na.omit(store_exp),trim=0.1),0), online_exp=round(mean(online_exp),0), store_trans=round(mean(store_trans),1), online_trans=round(mean(online_trans),1)) ## segment Age FemalePct HouseYes store_exp ## 1 Conspicuous 42 0.32 0.86 4990 ## 2 Price 60 0.45 0.94 501 ## 3 Quality 35 0.47 0.34 301 ## 4 Style 24 0.81 0.27 200 ## online_exp store_trans online_trans ## 1 4898 10.9 11.1 ## 2 205 6.1 3.0 ## 3 2013 2.9 16.0 ## 4 1962 3.0 21.1 Now, let’s peel the onion in order. The first argument sim.dat is easy. It is the data you want to work on. The second argument &quot;segment&quot; is the column you want to group by. It is a very standard marketing segmentation problem. The final segment is the result you want to get by designing survey, collecting and analyzing data. Here we assume those segments are known, and we want to understand how each group of customer look like. It is a common task in segmentation: figuring out a profile. Here we only summarize data by one categorical variable, but you can group by multiple variables using ddply(sim.dat, c(&quot;segment&quot;,&quot;house&quot;), .). So the second argument tells the function we want to divide data by customer segment. The third argument summarize tells R the kind of manipulation you want to do which is to summarize data. There are other choices for this argument such as transform (transform data within each group) and subset(subset data within each group). Then the rest commands tell R the exact action. For example, Age=round(mean(na.omit(age)),0) tell R the following things: Calculate the mean of column age ignoring missing value Round the result to the specified number of decimal places Store the result in a new variable named Age The rest of the command above is similar. In the end, we calculate the following for each segment: Age: average age for each segment FemalePct: percentage for each segment HouseYes: percentage of people who own a house stroe_exp: average expense in store online_exp: average expense online store_trans: average times of transactions in store online_trans: average times of online transactions There is a lot of information you can draw from those simple averages. Conspicuous: average age is about 40. Target for middle-age wealthy people. 1/3 of them are female and 2/3 are male. They may be a good target for candy dad. They buy regardless the price. Almost all of them own house (0.86). It makes us wonder what is wrong with the rest 14%? They may live in Manhattan Price: They are older people, average age 60. Nearly all of them own a house(0.94). They are less likely to purchase online (store_trans=6 while online_trans=3). This is the only group that is less likely to buy online. Quality: The average age is 35. They are not way different with Conspicuous regarding age. But they spend much less. The percentages of male and female are similar. They prefer online shopping. More than half of them don’t own a house (0.66). Style: They are young people with average age 24. The majority of them are female (0.81). Most of them don’t own a house (0.73). They are very likely to be digital natives and definitely prefer online shopping. You may notice that Style group purchase more frequently online (online_trans=21) but the expense (online_exp=1962) is not higher. This makes us wondering what is the average expense each time so you have a better idea about the price range the group fall in. The analytical process is aggregated instead of independent steps. What you learn before will help you decide what to do next. Sometimes you also need to go backward to fix something in the previous steps. For example, you may need to check those negative expense value. We continue to use ddply() to calculate the two statistics: ddply(sim.dat,&quot;segment&quot;,summarize,avg_online=round(sum(online_exp)/sum(online_trans),2), avg_store=round(sum(store_exp)/sum(store_trans),2)) ## segment avg_online avg_store ## 1 Conspicuous 442.27 479.2 ## 2 Price 69.28 81.3 ## 3 Quality 126.05 105.1 ## 4 Style 92.83 121.1 Price group has the lowest averaged one-time purchasing price. The Conspicuous group will pay the highest price. When we build the profile in real life, we will need to look at the survey results too. Those simple data manipulations can provide you lots of information already. As mentioned before, other than “summarize” there are other functions such as “transform” and “subset”. For simplicity, we draw 11 random samples and 3 variables (age, store_exp and segment) from the original data according to the different segments. We will explain stratified sampling later. Here we just do it without explanation. library(caret) set.seed(2016) trainIndex&lt;-createDataPartition(sim.dat$segment,p=0.01,list=F,times=1) examp&lt;-sim.dat[trainIndex,c(&quot;age&quot;,&quot;store_exp&quot;,&quot;segment&quot;)] Now data frame examp only has 11 rows and 3 columns. Let’s look at the function of transform: ddply(examp,&quot;segment&quot;,transform,store_pct=round(store_exp/sum(store_exp),2)) ## age store_exp segment store_pct ## 1 42 6319.1 Conspicuous 0.55 ## 2 42 5106.5 Conspicuous 0.45 ## 3 55 595.3 Price 0.42 ## 4 64 399.4 Price 0.28 ## 5 64 426.7 Price 0.30 ## 6 39 362.5 Quality 0.58 ## 7 35 260.5 Quality 0.42 ## 8 23 205.6 Style 0.25 ## 9 24 212.3 Style 0.26 ## 10 24 202.1 Style 0.25 ## 11 28 200.2 Style 0.24 What “transform” does is to transform data within the specified group (segment) and append the result as a new column. Next let’s look at the function of “subset”: ddply(examp,&quot;segment&quot;,subset,store_exp&gt;median(store_exp)) ## age store_exp segment ## 1 42 6319.1 Conspicuous ## 2 55 595.3 Price ## 3 39 362.5 Quality ## 4 23 205.6 Style ## 5 24 212.3 Style You get all rows with store_exp greater than its group median. 5.2.3 dplyr package dplyr provides a flexible grammar of data manipulation focusing on tools for working with data frames (hence the d in the name). It is faster and more friendly: It identifies the most important data manipulations and make they easy to use from R It performs faster for in-memory data by writing key pieces in C++ using Rcpp The interface is the same for data frame, data table or database We will illustrate the following functions in order: Display Subset Summarize Create new variable Merge Display tbl_df(): Convert the data to tibble which offers better checking and printing capabilities than traditional data frames. It will adjust output width according to fit the current window. library(dplyr) tbl_df(sim.dat) glimpse(): This is like a transposed version of tbl_df() glimpse(sim.dat) Subset Get rows with income more than 300000: library(magrittr) filter(sim.dat, income &gt;300000) %&gt;% tbl_df() ## # A tibble: 4 x 19 ## age gender income house store_exp online_exp ## &lt;int&gt; &lt;fctr&gt; &lt;dbl&gt; &lt;fctr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 40 Male 301398 Yes 4840 3618 ## 2 33 Male 319704 Yes 5998 4396 ## 3 41 Male 317476 Yes 3030 4180 ## 4 37 Female 315697 Yes 6549 4284 ## # ... with 13 more variables: store_trans &lt;int&gt;, ## # online_trans &lt;int&gt;, Q1 &lt;int&gt;, Q2 &lt;int&gt;, Q3 &lt;int&gt;, ## # Q4 &lt;int&gt;, Q5 &lt;int&gt;, Q6 &lt;int&gt;, Q7 &lt;int&gt;, Q8 &lt;int&gt;, ## # Q9 &lt;int&gt;, Q10 &lt;int&gt;, segment &lt;fctr&gt; Here we meet a new operator %&gt;%. It is called “Pipe operator” which pipes a value forward into an expression or function call. What you get in the left operation will be the first argument or the only argument in the right operation. x %&gt;% f(y) = f(x, y) y %&gt;% f(x, ., z) = f(x, y, z ) It is an operator from magrittr which can be really beneficial. Look at the following code. Can you tell me what it does? ave_exp &lt;- filter( summarise( group_by( filter( sim.dat, !is.na(income) ), segment ), ave_online_exp = mean(online_exp), n = n() ), n &gt; 200 ) Now look at the identical code using “%&gt;%”: ave_exp &lt;- sim.dat %&gt;% filter(!is.na(income)) %&gt;% group_by(segment) %&gt;% summarise( ave_online_exp = mean(online_exp), n = n() ) %&gt;% filter(n &gt; 200) Isn’t it much more straight forward now? Let’s read it: Delete observations from sim.dat with missing income values Group the data from step 1 by variable segment Calculate mean of online expense for each segment and save the result as a new variable named ave_online_exp Calculate the size of each segment and saved it as a new variable named n Get segments with size larger than 200 You can use distinct() to delete duplicated rows. dplyr::distinct(sim.dat) sample_frac() will randomly select some rows with specified percentage. sample_n() can randomly select rows with specified number. dplyr::sample_frac(sim.dat, 0.5, replace = TRUE) dplyr::sample_n(sim.dat, 10, replace = TRUE) slice() will select rows by position: dplyr::slice(sim.dat, 10:15) It is equivalent to sim.dat[10:15,]. top_n() will select the order top n entries: dplyr::top_n(sim.dat,2,income) If you want to select columns instead of rows, you can use select(). The following are some sample codes: # select by column name dplyr::select(sim.dat,income,age,store_exp) # select columns whose name contains a character string dplyr::select(sim.dat, contains(&quot;_&quot;)) # select columns whose name ends with a character string # similar there is &quot;starts_with&quot; dplyr::select(sim.dat, ends_with(&quot;e&quot;)) # select columns Q1,Q2,Q3,Q4 and Q5 select(sim.dat, num_range(&quot;Q&quot;, 1:5)) # select columns whose names are in a group of names dplyr::select(sim.dat, one_of(c(&quot;age&quot;, &quot;income&quot;))) # select columns between age and online_exp dplyr::select(sim.dat, age:online_exp) # select all columns except for age dplyr::select(sim.dat, -age) Summarize The operations here are similar what we did before with apply() and ddply(). dplyr::summarise(sim.dat, avg_online = mean(online_trans)) ## avg_online ## 1 13.55 # apply function anyNA() to each column # you can also assign a function vector such as: c(&quot;anyNA&quot;,&quot;is.factor&quot;) dplyr::summarise_each(sim.dat, funs_(c(&quot;anyNA&quot;))) ## `summarise_each()` is deprecated. ## Use `summarise_all()`, `summarise_at()` or `summarise_if()` instead. ## To map `funs` over all variables, use `summarise_all()` ## age gender income house store_exp online_exp ## 1 FALSE FALSE TRUE FALSE FALSE FALSE ## store_trans online_trans Q1 Q2 Q3 Q4 ## 1 FALSE FALSE FALSE FALSE FALSE FALSE ## Q5 Q6 Q7 Q8 Q9 Q10 segment ## 1 FALSE FALSE FALSE FALSE FALSE FALSE FALSE You can use group_by() to indicate the variables you want to group by as before: sim.dat %&gt;% group_by(segment) %&gt;% summarise_each(funs_(c(&quot;anyNA&quot;))) ## `summarise_each()` is deprecated. ## Use `summarise_all()`, `summarise_at()` or `summarise_if()` instead. ## To map `funs` over all variables, use `summarise_all()` ## # A tibble: 4 x 19 ## segment age gender income house store_exp ## &lt;fctr&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; ## 1 Conspicuous FALSE FALSE TRUE FALSE FALSE ## 2 Price FALSE FALSE TRUE FALSE FALSE ## 3 Quality FALSE FALSE TRUE FALSE FALSE ## 4 Style FALSE FALSE TRUE FALSE FALSE ## # ... with 13 more variables: online_exp &lt;lgl&gt;, ## # store_trans &lt;lgl&gt;, online_trans &lt;lgl&gt;, Q1 &lt;lgl&gt;, ## # Q2 &lt;lgl&gt;, Q3 &lt;lgl&gt;, Q4 &lt;lgl&gt;, Q5 &lt;lgl&gt;, Q6 &lt;lgl&gt;, ## # Q7 &lt;lgl&gt;, Q8 &lt;lgl&gt;, Q9 &lt;lgl&gt;, Q10 &lt;lgl&gt; Create new variable mutate() will compute and append one or more new columns: dplyr::mutate(sim.dat, total_exp = store_exp + online_exp) It will apply window function to the columns and return a column with the same length. It is a different type of function as before. # min_rank=rank(ties.method = &quot;min&quot;) # mutate_each() means apply function to each column dplyr::mutate_each(sim.dat, funs(min_rank)) The other similar function is transmute(). The difference is that transmute() will delete the original columns and only keep the new ones. dplyr::transmute(sim.dat, total_exp = store_exp + online_exp) Merge We create two baby data sets to show how the functions work. (x&lt;-data.frame(cbind(ID=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;),x1=c(1,2,3)))) ## ID x1 ## 1 A 1 ## 2 B 2 ## 3 C 3 (y&lt;-data.frame(cbind(ID=c(&quot;B&quot;,&quot;C&quot;,&quot;D&quot;),y1=c(T,T,F)))) ## ID y1 ## 1 B TRUE ## 2 C TRUE ## 3 D FALSE # join to the left # keep all rows in x left_join(x,y,by=&quot;ID&quot;) ## ID x1 y1 ## 1 A 1 &lt;NA&gt; ## 2 B 2 TRUE ## 3 C 3 TRUE # get rows matched in both data sets inner_join(x,y,by=&quot;ID&quot;) ## ID x1 y1 ## 1 B 2 TRUE ## 2 C 3 TRUE # get rows in either data set full_join(x,y,by=&quot;ID&quot;) ## ID x1 y1 ## 1 A 1 &lt;NA&gt; ## 2 B 2 TRUE ## 3 C 3 TRUE ## 4 D &lt;NA&gt; FALSE # filter out rows in x that can be matched in y # it doesn&#39;t bring in any values from y semi_join(x,y,by=&quot;ID&quot;) ## ID x1 ## 1 B 2 ## 2 C 3 # the opposite of semi_join() # it gets rows in x that cannot be matched in y # it doesn&#39;t bring in any values from y anti_join(x,y,by=&quot;ID&quot;) ## ID x1 ## 1 A 1 There are other functions(intersect(), union() and setdiff()). Also the data frame version of rbind and cbind which are bind_rows() and bind_col(). We are not going to go through them all. You can try them yourself. If you understand the functions we introduced so far. It should be easy for you to figure out the rest. "],
["tidy-and-reshape-data.html", "5.3 Tidy and Reshape Data", " 5.3 Tidy and Reshape Data “Tidy data” represent the information from a dataset as data frames where each row is an observation and each column contains the values of a variable (i.e. an attribute of what we are observing). Depending on the situation, the requirements on what to present as rows and columns may change. In order to make data easy to work with for the problem at hand, in practice, we often need to convert data between the “wide” and the “long” format. The process feels like playing with a dough. There are two commonly used packages for this kind of manipulations: tidyr and reshape2. We will show how to tidy and reshape data using the two packages. By comparing the functions to show how they overlap and where they differ. 5.3.1 reshape2 package It is a reboot of the previous package reshape. Why? Here is what we got from Stack Overflow: “reshape2 let Hadley make a rebooted reshape that was way, way faster, while avoiding busting up people’s dependencies and habits.” Take a baby subset of our exemplary clothes consumers data to illustrate: (sdat&lt;-sim.dat[1:5,1:6]) ## age gender income house store_exp online_exp ## 1 57 Female 120963 Yes 529.1 303.5 ## 2 63 Female 122008 Yes 478.0 109.5 ## 3 59 Male 114202 Yes 490.8 279.2 ## 4 60 Male 113616 Yes 347.8 141.7 ## 5 51 Male 124253 Yes 379.6 112.2 For the above data sdat, what if we want to have a variable indicating the purchasing channel (i.e. online or in-store) and another column with the corresponding expense amount? Assume we want to keep the rest of the columns the same. It is a task to change data from “wide” to “long”. There are two general ways to shape data: Use melt() to convert an object into a molten data frame, i.e. from wide to long Use dcast() to cast a molten data frame into the shape you want, i.e. from long to wide library(reshape2) (mdat &lt;- melt(sdat, measure.vars=c(&quot;store_exp&quot;,&quot;online_exp&quot;), variable.name = &quot;Channel&quot;, value.name = &quot;Expense&quot;)) ## age gender income house Channel Expense ## 1 57 Female 120963 Yes store_exp 529.1 ## 2 63 Female 122008 Yes store_exp 478.0 ## 3 59 Male 114202 Yes store_exp 490.8 ## 4 60 Male 113616 Yes store_exp 347.8 ## 5 51 Male 124253 Yes store_exp 379.6 ## 6 57 Female 120963 Yes online_exp 303.5 ## 7 63 Female 122008 Yes online_exp 109.5 ## 8 59 Male 114202 Yes online_exp 279.2 ## 9 60 Male 113616 Yes online_exp 141.7 ## 10 51 Male 124253 Yes online_exp 112.2 You melted the data frame sdat by two variables: store_exp and online_exp (measure.vars=c(&quot;store_exp&quot;,&quot;online_exp&quot;)). The new variable name is Channel set by command variable.name = &quot;Channel&quot;. The value name is Expense set by command value.name = &quot;Expense&quot;. You can run a regression to study the effect of purchasing channel: # Here we use all observations from sim.dat mdat&lt;-melt(sim.dat[,1:6], measure.vars=c(&quot;store_exp&quot;,&quot;online_exp&quot;), variable.name = &quot;Channel&quot;, value.name = &quot;Expense&quot;) fit&lt;-lm(Expense~gender+house+income+Channel+age,data=mdat) summary(fit) ## ## Call: ## lm(formula = Expense ~ gender + house + income + Channel + age, ## data = mdat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -4208 -821 -275 533 44353 ## ## Coefficients: ## Estimate Std. Error t value ## (Intercept) -9.13e+02 1.56e+02 -5.86 ## genderMale 3.57e+02 1.03e+02 3.48 ## houseYes -5.69e+01 1.14e+02 -0.50 ## income 2.83e-02 1.08e-03 26.27 ## Channelonline_exp 8.30e+02 9.77e+01 8.49 ## age -2.79e+01 3.36e+00 -8.32 ## Pr(&gt;|t|) ## (Intercept) 5.8e-09 *** ## genderMale 0.00052 *** ## houseYes 0.61727 ## income &lt; 2e-16 *** ## Channelonline_exp &lt; 2e-16 *** ## age &lt; 2e-16 *** ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1970 on 1626 degrees of freedom ## (368 observations deleted due to missingness) ## Multiple R-squared: 0.348, Adjusted R-squared: 0.346 ## F-statistic: 174 on 5 and 1626 DF, p-value: &lt;2e-16 You can melt() list, matrix, table too. The syntax is similar and we won’t go through every situation. Sometimes we want to convert the data from “long” to “wide”. For example, you want to compare the online and in store expense between male and female based on the house ownership. dcast(mdat, house + gender ~ Channel, sum) ## Using &#39;Expense&#39; as value column. Use &#39;value.var&#39; to override ## house gender store_exp online_exp ## 1 No Female 171102 583492 ## 2 No Male 133131 332500 ## 3 Yes Female 355320 500857 ## 4 Yes Male 697297 703332 In the above code, what is the left side of ~ are variables that you want to group by. The right side is the variable you want to spread as columns. It will use the column indicating value from melt() before. Here is “Expense” . 5.3.2 tidyr package The other package that will do similar manipulations is tidyr. Let’s get a subset to illustrate the usage. library(dplyr) # practice functions we learnt before sdat&lt;-sim.dat[1:5,]%&gt;% dplyr::select(age,gender,store_exp,store_trans) sdat %&gt;% tbl_df() ## # A tibble: 5 x 4 ## age gender store_exp store_trans ## * &lt;int&gt; &lt;fctr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 57 Female 529.1 2 ## 2 63 Female 478.0 4 ## 3 59 Male 490.8 7 ## 4 60 Male 347.8 10 ## 5 51 Male 379.6 4 gather() function in tidyr is analogous to melt() in reshape2. The following code will do the same thing as we did before using melt(): library(tidyr) msdat&lt;-tidyr::gather(sdat,&quot;variable&quot;,&quot;value&quot;,store_exp,store_trans) msdat %&gt;% tbl_df() ## # A tibble: 10 x 4 ## age gender variable value ## &lt;int&gt; &lt;fctr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 57 Female store_exp 529.1 ## 2 63 Female store_exp 478.0 ## 3 59 Male store_exp 490.8 ## 4 60 Male store_exp 347.8 ## 5 51 Male store_exp 379.6 ## 6 57 Female store_trans 2.0 ## 7 63 Female store_trans 4.0 ## 8 59 Male store_trans 7.0 ## 9 60 Male store_trans 10.0 ## 10 51 Male store_trans 4.0 Or if we use the pipe operation, we can write the above code as: sdat%&gt;%gather(&quot;variable&quot;,&quot;value&quot;,store_exp,store_trans) It is identical with the following code using melt(): melt(sdat, measure.vars=c(&quot;store_exp&quot;,&quot;store_trans&quot;), variable.name = &quot;variable&quot;, value.name = &quot;value&quot;) The opposite operation to gather() is spread(). The previous one stacks columns and the latter one spread the columns. msdat %&gt;% spread(variable,value) ## age gender store_exp store_trans ## 1 51 Male 379.6 4 ## 2 57 Female 529.1 2 ## 3 59 Male 490.8 7 ## 4 60 Male 347.8 10 ## 5 63 Female 478.0 4 Another pair of functions that do opposite manipulations are separate() and unite(). sepdat&lt;- msdat %&gt;% separate(variable,c(&quot;Source&quot;,&quot;Type&quot;)) sepdat %&gt;% tbl_df() ## # A tibble: 10 x 5 ## age gender Source Type value ## * &lt;int&gt; &lt;fctr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 57 Female store exp 529.1 ## 2 63 Female store exp 478.0 ## 3 59 Male store exp 490.8 ## 4 60 Male store exp 347.8 ## 5 51 Male store exp 379.6 ## 6 57 Female store trans 2.0 ## 7 63 Female store trans 4.0 ## 8 59 Male store trans 7.0 ## 9 60 Male store trans 10.0 ## 10 51 Male store trans 4.0 You can see that the function separates the original column “variable” to two new columns “Source” and “Type”. You can use sep= to set the string or regular expression to separate the column. By default, it is “_”. The unite() function will do the opposite: combining two columns. It is the generalization of paste() to a data frame. sepdat %&gt;% unite(&quot;variable&quot;,Source,Type,sep=&quot;_&quot;) ## age gender variable value ## 1 57 Female store_exp 529.1 ## 2 63 Female store_exp 478.0 ## 3 59 Male store_exp 490.8 ## 4 60 Male store_exp 347.8 ## 5 51 Male store_exp 379.6 ## 6 57 Female store_trans 2.0 ## 7 63 Female store_trans 4.0 ## 8 59 Male store_trans 7.0 ## 9 60 Male store_trans 10.0 ## 10 51 Male store_trans 4.0 The reshaping manipulations may be the trickiest part. You have to practice a lot to get familiar with those functions. Unfortunately, there is no shortcut. -->"],
["references.html", "Chapter 6 References", " Chapter 6 References "]
]
