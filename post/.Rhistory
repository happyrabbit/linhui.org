setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
load("https://raw.githubusercontent.com/happyrabbit/CE_JSM2017/master/Rcode/00Require.R")
source("https://raw.githubusercontent.com/happyrabbit/CE_JSM2017/master/Rcode/00Require.R")
setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
sim.dat <- read_csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv ")
summary(sim.dat)
sim.dat$age[which(sim.dat$age>100)]<-NA
sim.dat$store_exp[which(sim.dat$store_exp<0)]<-NA
# see the results
summary(subset(sim.dat,select=c("age","income")))
demo_imp<-impute(sim.dat,method="median/mode")
# check the first 5 columns, there is no missing values in other columns
summary(demo_imp[,1:5])
imp<-preProcess(sim.dat,method="medianImpute")
demo_imp2<-predict(imp,sim.dat)
summary(demo_imp2[,1:5])
imp<-preProcess(sim.dat,method="knnImpute",k=5)
idx<-which(lapply(sim.dat,class)=="factor")
demo_imp<-predict(imp,sim.dat[,-idx])
library(caret)
imp<-preProcess(sim.dat,method="knnImpute",k=5)
idx<-which(lapply(sim.dat,class)=="factor")
idx
lapply(sim.dat,class)
sim.dat <- read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv ")
summary(sim.dat)
sim.dat$age[which(sim.dat$age>100)]<-NA
sim.dat$store_exp[which(sim.dat$store_exp<0)]<-NA
# see the results
summary(subset(sim.dat,select=c("age","income")))
imp<-preProcess(sim.dat,method="knnImpute",k=5)
idx<-which(lapply(sim.dat,class)=="factor")
demo_imp<-predict(imp,sim.dat[,-idx])
summary(demo_imp[,1:3])
lapply(sim.dat,class)[1:3]
imp<-preProcess(sim.dat,method="bagImpute")
demo_imp<-predict(imp,sim.dat)
summary(demo_imp[,1:5])
imp<-preProcess(sim.dat,method="bagImpute")
demo_imp<-predict(imp,sim.dat)
summary(demo_imp[,1:5])
qscale<-function(dat){
for (i in 1:ncol(dat)){
up<-quantile(dat[,i],0.99)
low<-quantile(dat[,i],0.01)
diff<-up-low
dat[,i]<-(dat[,i]-low)/diff
}
return(dat)
}
demo_imp3<-qscale(subset(demo_imp2,select=c("income","store_exp","online_exp")))
imp<-preProcess(sim.dat,method="medianImpute")
demo_imp2<-predict(imp,sim.dat)
summary(demo_imp2[,1:5])
demo_imp3<-qscale(subset(demo_imp2,select=c("income","store_exp","online_exp")))
summary(demo_imp3)
describe(sim.dat)
set.seed(1000)
par(mfrow=c(1,2),oma=c(2,2,2,2))
# random sample 1000 chi-square distribution with df=2
# right skew
x1<-rchisq(1000,2, ncp = 0)
# get left skew variable x2 from x1
x2<-max(x1)-x1
plot(density(x2),main=paste("left skew, skewnwss ＝",round(skewness(x2),2)), xlab="X2")
plot(density(x1),main=paste("right skew, skewness ＝",round(skewness(x1),2)), xlab="X1")
set.seed(1000)
par(mfrow=c(1,2),oma=c(2,2,2,2))
# random sample 1000 chi-square distribution with df=2
# right skew
x1<-rchisq(1000,2, ncp = 0)
# get left skew variable x2 from x1
x2<-max(x1)-x1
plot(density(x2),main=paste("left skew, skewnwss =",round(skewness(x2),2)), xlab="X2")
plot(density(x1),main=paste("right skew, skewness =",round(skewness(x1),2)), xlab="X1")
describe(sim.dat)
dat_bc<-subset(sim.dat,select=c("store_trans","online_trans"))
(trans<-preProcess(dat_bc,method=c("BoxCox")))
transformed<-predict(trans,dat_bc)
par(mfrow=c(1,2),oma=c(2,2,2,2))
hist(dat_bc$store_trans,main="Before Transformation",xlab="store_trans")
hist(transformed$store_trans,main="After Transformation",xlab="store_trans")
setwd("/Users/happyrabbit/Documents/GitHub/CE_JSM2017")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
sim.dat<-read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv")
# Get numerical variables
sdat<-sim.dat[,!lapply(sim.dat,class)=="factor"]
library(dplyr)
sim.dat%>%
group_by(gender)%>%
summarise(Avg_online_trans=mean(online_trans))
library(dplyr)
sim.dat%>%
group_by(gender)%>%
summarise(Avg_online_trans=mean(online_trans))
sim.dat%>%
group_by(gender)%>%
summarise(Avg_online_trans=mean(online_trans))
str(sim.dat)
aggregate(online_trans ~ gender, data = sim.dat, mean)
sim.dat%>%
dplyr::group_by(gender)%>%
summarise(Avg_online_trans=mean(online_trans))
sim.dat%>%
group_by("gender")%>%
summarise(Avg_online_trans=mean(online_trans))
ave_exp <- filter(
summarise(
group_by(
filter(
sim.dat,
!is.na(income)
),
segment
),
ave_online_exp = mean(online_exp),
n = n()
),
n > 200
)
library(dplyr)
ave_exp <- filter(
summarise(
group_by(
filter(
sim.dat,
!is.na(income)
),
segment
),
ave_online_exp = mean(online_exp),
n = n()
),
n > 200
)
ave_exp <- sim.dat %>%
filter(!is.na(income)) %>%
group_by(segment) %>%
summarise(
ave_online_exp = mean(online_exp),
n = n() ) %>%
filter(n > 200)
ave_exp <- sim.dat %>%
filter(!is.na(income)) %>%
group_by(segment) %>%
summarise(
ave_online_exp = mean(online_exp),
cn = n() ) %>%
filter(n > 200)
ave_exp <- sim.dat %>%
filter(!is.na(income)) %>%
group_by(segment) %>%
summarise(
ave_online_exp = mean(online_exp),
cn = n() ) %>%
filter(cn > 200)
str(sim.dat)
sim.dat<-read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv",stringsAsFactors = F)
sim.dat%>%
group_by(gender)%>%
summarise(Avg_online_trans=mean(online_trans))
str(sim.dat)
sim.dat%>%
group_by(segment)%>%
summarise(Avg_online_trans=mean(online_trans))
group_by(sim.dat,segment)%>%
summarise(Avg_online_trans=mean(online_trans))
install.packages("dplyr")
library(dplyr)
sim.dat%>%
group_by(sim.dat,segment)%>%
summarise(Avg_online_trans=mean(online_trans))
sim.dat<-read.csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv")
sim.dat[1:2,]
# subset the first two rows and column 3 and 5
sim.dat[1:2,c(3,5)]
# get all rows with age>70
sim.dat[sim.dat$age>70,]
# get rows with age> 60 and gender is Male
# select column 3 and 4
sim.dat[sim.dat$age>68 & sim.dat$gender == "Male", 3:4]
tapply(sim.dat$online_trans, sim.dat$gender, mean )
aggregate(online_trans ~ gender, data = sim.dat, mean)
sim.dat%>%
group_by(sim.dat,segment)%>%
summarise(Avg_online_trans=mean(online_trans))
sim.dat%>%
group_by(segment)%>%
summarise(Avg_online_trans=mean(online_trans))
sim.dat<-readr::read_csv("https://raw.githubusercontent.com/happyrabbit/DataScientistR/master/Data/SegData.csv")
# subset the first two rows
sim.dat[1:2,]
# subset the first two rows and column 3 and 5
sim.dat[1:2,c(3,5)]
# get all rows with age>70
sim.dat[sim.dat$age>70,]
# get rows with age> 60 and gender is Male
# select column 3 and 4
sim.dat[sim.dat$age>68 & sim.dat$gender == "Male", 3:4]
tapply(sim.dat$online_trans, sim.dat$gender, mean )
aggregate(online_trans ~ gender, data = sim.dat, mean)
sim.dat%>%
group_by(segment)%>%
summarise(Avg_online_trans=mean(online_trans))
library(dplyr)
sim.dat%>%
group_by(segment)%>%
summarise(Avg_online_trans=mean(online_trans))
