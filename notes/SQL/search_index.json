[
["index.html", "SQL for Data Science Statement", " SQL for Data Science Hui Lin 2017-11-25 Statement This is my learning notes on SQL. It is initially from Sadie St. Lawrence’s Coursera course “SQL for Data Science”. "],
["getting-started.html", "Chapter 1 Getting Started 1.1 What is SQL?", " Chapter 1 Getting Started In this section, you will be able to define SQL and discuss how SQL differs from other computer languages. You will be able to compare and contrast the roles of a database administrator and a data scientist, and explain the differences between one-to-one, one-to-many and many-to-many relationships with databases. You will be able to use the SELECT statement and talk about some basic syntax rules. You will be able to add comments in your code and synthesize its importance. Learning Objectives Distinguish between use of SQL for data science applications and SQL for more common data management operations. Use an Entity Relationship diagram, describing the data elements, their relationships and inter-dependencies and determine if the existent data is sufficient to address a business question. Identify a subset of data needed from a column or set of columns and write and SQL query to limit to those results. Create an analysis environment and use INSERT to put data into a table Add effective comments in your queries so that: You can remember what you are doing others can review your work 1.1 What is SQL? Structured Query Language (SQL) is a standard computer language for relational database management and data manipulation. SQL is used often to query, insert, update and modify data. At a basic level, SQL is a way to communicate with database. Many SQL commands are descriptive words and easy to interpret compared to many other computer languages. This makes SQL an easy to understand and learn language. Another important thing to know about SQL is that it is a non-procedural language. That means you won’t be able to write complete applications with it. This makes SQL relatively simple but also very powerful language to interact with data. SQL is all about data and it is used for three things: read and retrieve data from database write data into database update and insert new data Different SQL users There are a lot of jobs requre SQL and it is not just for data science. It is important to understand how different roles might use SQL in their jobs. The users can be data scientist, programmers, backend developer, QA engineers, data architects, system engineers and database administrators (DBA). I want to talk a little more about how DBA use SQL comparing to data scientist. A DBA is responsible for managing the entire database and guarding it. A data scientist, on the other hand, is typically a user of that database. The DBA will be responsible for giving permissions to people and determining who has access to what data. They are often responsible for managing the tables and creating them. Data scientist need to get the rights from DBA to create his/her own table and insert data into them. The two roles are similar in that they both use SQL to interact with the data. But the main difference is that the data scientist is really the end user. Whereas the DBA is the one who administers it, governs it and manages the database, as a whole. Database Admin Data Scientist Manages/governs entire database End user of a database Gives permissions to users Retrieve data (mainly) Determines access to data May create their own table or test environment Manages and creates tables Combine multiple sources together Uses SQL to query and retrive data Writes complex queries for analysis (maybe but usually not) SQL and Database Management System(DBMS) Despite SQL being standardized since 1986, a lot of different implementations exist. They deviate more or less from each other. You can think of SQL as the interpreter between you and the database. How you write some of the syntax for SQL depends on the relational database management system you are using. Here are some of the popular ones: SQL Server IBM DB2 Oracle Sybase ASE PostgreSQL MySQL Microsoft SQL Server Apache Open Office Base SQLite In this text, we’ll use SQLite. It’s important to understand that if you copy code from this text into another application at work, it may not work correctly. You should check the type of DBMS you’re using and see if that makes a difference. We will talk about this more when we get to the syntax later including some of the ways to figure out what those differences might be. Summary points: How you write syntax will depend on what DBMS you are using Each DBMS has its own “dialect” SQL can translate You will tweak based on the “dialect” your DMBS speaks "],
["data-models-and-diagrams.html", "Chapter 2 Data Models and Diagrams 2.1 Think before code 2.2 What is data model?", " Chapter 2 Data Models and Diagrams Learning Objectives Explain why thinking beforing coding is important Explain why it is important to understand how the data in a database relates to one another Describe what a databse is at its core Describe data models Define relational database system Discuss advent of relational databases in SQL 2.1 Think before code The reason why thinking beforing coding is importan is because you have to understand the structure of the data well to effectively write queries. Understanding your data means the following: Understand the business process or subject matter the data is modeled after Know the business rules Understand how your data is organized and structured in the table Before you start to write a query, think about: what is the problem you are trying to solve? what is the data you need to get? how does the data relate to each other? how does it interact? what are some of the problems that you may want to solve with this data and need to be aware of? what are the types of joints or business processes in the data modeling? This will really help you because not only will you get more accurate results, but also speed up the time it takes you to work and get things done. If you start to think about what you’re doing before you do it, you should hopefully also have less rework. Now what is a database and what is a table? Database: A container (usually a file or set of files) to stre organized data; a set of related information Tables: A structured list of data or a specific type A database is really a container that is usually a file or set of files and is used to organize and store all of the data. If you think of this in real world terms, It’d be like a filing system that has many cabinets along a wall. Within that system, within a database, we have tables, these tables are structured lists of data elements or specific data type. Going back to our analogy, you can think of this as maybe one of the cabinets within a whole wall of cabinets. Then if we dive further into the cabinet, into a table, what we find is we have columns and rows, which of course is what makes up a table. A table is made up of a series of individual columns, and then a row and a table is a record. Through tables, rows, and columns, ultimately throughout the database we have a mechanism to store and retrieve data. 2.2 What is data model? Data model is what we use to organize information for multiple tables and how they relate to each other together. This helps tremendously in providing structure to the information in the system. Usually a data model represents a business process and it also helps you understand a business process. As a data scientist, you often need to work with a business person in understanding the data and how it fits together. But at the same time, the business person will learn a lot from the data modeller to better understand how their business actually works together by seeing the data and how it interacts with each other. The data model here is not predictive model which a data scientist often build. It is a way the tables are represented and organized in a database. One thing to remember is that a data model should always represent a real world problem as closely as possible. There are couple different types of models, and there has been an evolution of data models. The evolution of data model traces back to 1960s. There’s been hierarchical, network, relational, entity, relational somatic, and NoSql. Here we will briefly talk a little about the relational and NoSql. Because we are going to work a lot with relational model. If you are interested in learning more, there is material widely available on the internet and you can do your own research. The benefits of a relational model are: simplify the connections between the data allow you to write queries (retrieve/update/write data) easily NoSQL was part of the Big Data movement that you should have already heard about. It is a mechanism for storage and retrieval where it’s not modeled in a tabular relational format. NoSQL was popular when big data and unstructured data first came out because you left it unstructured, but it’s now started to soften a little bit, and more commonly referred to as Not Only SQL. does SQL really have a role still in the Big Data world, as new things start to come out like NoSQL and unstructured data? "]
]
